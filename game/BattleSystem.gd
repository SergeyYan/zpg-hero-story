#BattleSystem.gd
extends CanvasLayer

signal battle_ended(victory: bool)

const PLAYER_CRITICAL_MULTIPLIER := 2.0
const ENEMY_CRITICAL_MULTIPLIER := 1.5

@onready var player_stats_container: VBoxContainer = $StatsPlayer/PlayerStats
@onready var enemy_stats: VBoxContainer = $StatsMonster/EnemyStats
@onready var battle_log: RichTextLabel = $BattleUI/BattleLog
@onready var timer: Timer = $Timer

var player_stats_instance: PlayerStats
var current_enemy: Node = null
var current_enemy_stats: MonsterStats = null  # ‚Üê –î–û–ë–ê–í–ò–õ–ò!
var is_player_turn: bool = true

var player_attack_messages = [
	"[color=#ff6b6b]–ì–µ—Ä–æ–π –Ω–∞–Ω–µ—Å ‚öîÔ∏è %d —É—Ä–æ–Ω–∞![/color]",  # ‚Üê –ö—Ä–∞—Å–Ω—ã–π
	"[color=#ff6b6b]–ì–µ—Ä–æ–π —Å —Ä–∞–∑–±–µ–≥—É —É–¥–∞—Ä–∏–ª –Ω–∞ ‚öîÔ∏è %d —É—Ä–æ–Ω–∞![/color]",
	"[color=#ff6b6b]–ì–µ—Ä–æ–π –Ω–∞ –æ—Ç–º–∞—à—å —É–¥–∞—Ä–∏–ª –Ω–∞ ‚öîÔ∏è %d —É—Ä–æ–Ω–∞![/color]", 
	"[color=#ff6b6b]–ì–µ—Ä–æ–π –Ω–∞–Ω–µ—Å –º–æ—â–Ω—ã–π —É–¥–∞—Ä –Ω–∞ ‚öîÔ∏è %d —É—Ä–æ–Ω–∞![/color]",
	"[color=#ff6b6b]–ì–µ—Ä–æ–π –±—Ä–æ—Å–∏–ª –∫–∞–º–µ–Ω—å –≤ –≥–æ–ª–æ–≤—É –Ω–∞ ‚öîÔ∏è %d —É—Ä–æ–Ω–∞![/color]",
	"[color=#ff6b6b]–ì–µ—Ä–æ–π —É–ø–∞–ª –Ω–∞ –∫–æ–ª–µ–Ω–∫—É –≤—Ä–∞–≥–∞ –∏ –Ω–∞–Ω–µ—Å–ª–∏ ‚öîÔ∏è %d —É—Ä–æ–Ω–∞![/color]",
	"[color=#ff6b6b]–ì–µ—Ä–æ–π –ø–ª—é–Ω—É–ª –ø—Ä—è–º–æ –≤ –±—É–±–µ–Ω –Ω–∞ ‚öîÔ∏è %d —É—Ä–æ–Ω–∞![/color]",
	"[color=#ff6b6b]–†–∞–∑—è—â–∏–π —É–¥–∞—Ä –≥–µ—Ä–æ—è –≤ –ø–∞—Ö –Ω–∞ ‚öîÔ∏è %d —É—Ä–æ–Ω–∞![/color]",
	"[color=#ff6b6b]–°–æ–∫—Ä—É—à–∏—Ç–µ–ª—å–Ω—ã–π —É–¥–∞—Ä –ø–æ —Å–∞–º–æ–ª—é–±–∏—é –≤—Ä–∞–≥–∞ –Ω–∞ ‚öîÔ∏è %d —É—Ä–æ–Ω–∞![/color]",
	"[color=#ff6b6b]–í—Ä–∞–≥ —Å–ø–æ—Ç—ã–∫–Ω—É–ª—Å—è –∏ –ø–æ–ª—É—á–∏–ª ‚öîÔ∏è %d —É—Ä–æ–Ω–∞![/color]"
]

var enemy_attack_messages = [
	"[color=#ffd93d]%s –Ω–∞–Ω–µ—Å –≤–∞–º ‚öîÔ∏è %d —É—Ä–æ–Ω–∞![/color]",  # ‚Üê –ñ–µ–ª—Ç—ã–π
	"[color=#ffd93d]%s –∞—Ç–∞–∫—É–µ—Ç –∏ –Ω–∞–Ω–æ—Å–∏—Ç ‚öîÔ∏è %d —É—Ä–æ–Ω–∞![/color]",
	"[color=#ffd93d]%s –±—å–µ—Ç –≤–∞—Å –Ω–∞ ‚öîÔ∏è %d —É—Ä–æ–Ω–∞![/color]",
	"[color=#ffd93d]–ê—Ç–∞–∫–∞ %s–∞ –≤ –≥–æ–ª–æ–≤—É –Ω–∞–Ω–æ—Å–∏—Ç ‚öîÔ∏è %d —É—Ä–æ–Ω–∞![/color]",
	"[color=#ffd93d]%s —Ü–∞—Ä–∞–ø–∞–µ—Ç –≤–∞—Å –Ω–∞ ‚öîÔ∏è %d —É—Ä–æ–Ω–∞![/color]",
	"[color=#ffd93d]%s –∫—É—Å–∞–µ—Ç –≤–∞—Å –Ω–∞ ‚öîÔ∏è %d —É—Ä–æ–Ω–∞![/color]",
	"[color=#ffd93d]–©–µ–ª—á–æ–∫ %s–∞ –Ω–∞–Ω–æ—Å–∏—Ç ‚öîÔ∏è %d —É—Ä–æ–Ω–∞![/color]",
	"[color=#ffd93d]%s —Ç–æ–ª–∫–∞–µ—Ç –≤–∞—Å –Ω–∞ ‚öîÔ∏è %d —É—Ä–æ–Ω–∞![/color]",
	"[color=#ffd93d]–ë—Ä–æ—Å–æ–∫ –ø—ã–ª–∏ %s–∞ –Ω–∞–Ω–æ—Å–∏—Ç ‚öîÔ∏è %d —É—Ä–æ–Ω–∞![/color]",
	"[color=#ffd93d]%s –ø—Ä—ã–≥–∞–µ—Ç –≤–∞–º –Ω–∞ —à–µ—é, –Ω–∞–Ω–µ—Å–µ–Ω ‚öîÔ∏è %d —É—Ä–æ–Ω–∞ –ø–æ—è—Å–Ω–∏—Ü–µ![/color]"
]

var player_critical_messages = [
	"[color=#ff0000][b]üî• –ì–ï–†–û–ô –ù–ê–ù–û–°–ò–¢ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–î–ê–†! %d —É—Ä–æ–Ω–∞! üî•[/b][/color]",  # ‚Üê –ö—Ä–∞—Å–Ω—ã–π + –∂–∏—Ä–Ω—ã–π
	"[color=#ff0000][b]üí• –ì–ï–†–û–ô –ù–ê–ù–û–°–ò–¢ –°–ú–ï–†–¢–ï–õ–¨–ù–´–ô –£–î–ê–†! %d —É—Ä–æ–Ω–∞! üí•[/b][/color]",
	"[color=#ff0000][b]‚≠ê –ì–ï–†–û–ô –î–ï–õ–ê–ï–¢ –ò–î–ï–ê–õ–¨–ù–´–ô –£–î–ê–†! %d —É—Ä–æ–Ω–∞! ‚≠ê[/b][/color]"
]

var enemy_critical_messages = [
	"[color=#ffcc00][b]üî• %s –ù–ê–ù–û–°–ò–¢ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–î–ê–†! %d —É—Ä–æ–Ω–∞! üî•[/b][/color]",  # ‚Üê –ñ–µ–ª—Ç—ã–π + –∂–∏—Ä–Ω—ã–π
	"[color=#ffcc00][b]üí• %s –ù–ê–ù–û–°–ò–¢ –°–ú–ï–†–¢–ï–õ–¨–ù–´–ô –£–î–ê–†! %d —É—Ä–æ–Ω–∞! üí•[/b][/color]",
	"[color=#ffcc00][b]‚≠ê %s –î–ï–õ–ê–ï–¢ –ò–î–ï–ê–õ–¨–ù–´–ô –£–î–ê–†! %d —É—Ä–æ–Ω–∞! ‚≠ê[/b][/color]"
]


func _ready():
	add_to_group("battle_system")
	player_stats_instance = get_tree().get_first_node_in_group("player_stats")
	if not player_stats_instance:
		push_error("PlayerStats not found!")
	
	hide()  # ‚Üê –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£!

func start_battle(enemy: Node, enemy_stats_ref: MonsterStats):
	if player_stats_instance.current_health <= 0:
		#print("–ò–≥—Ä–æ–∫ –º—ë—Ä—Ç–≤, –±–æ–π –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è")
		return
	# –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å enemy
	if not is_instance_valid(enemy) or not is_instance_valid(enemy_stats_ref):
		#print("–í—Ä–∞–≥ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, –±–æ–π –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è")
		return
	# –ó–ê–©–ò–¢–ê: –Ω–µ –Ω–∞—á–∏–Ω–∞–µ–º –±–æ–π –≤ –ø–µ—Ä–≤—ã–µ —Å–µ–∫—É–Ω–¥—ã –∏–≥—Ä—ã
	if get_tree().get_frame() < 60:  # –ü–µ—Ä–≤—ã–µ 60 –∫–∞–¥—Ä–æ–≤ (‚âà1 —Å–µ–∫—É–Ω–¥–∞)
		#print("–°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è –±–æ—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
		return
	
	current_enemy = enemy
	current_enemy_stats = enemy_stats_ref
	show()
	get_tree().paused = true
	_disable_menu_button(true)
	update_stats()
	battle_log.text = "–ë–æ–π –Ω–∞—á–∞–ª—Å—è –ø—Ä–æ—Ç–∏–≤ %s!\n" % current_enemy_stats.enemy_name
	timer.start(1.0)
	

func update_stats():
	# –ü–†–û–í–ï–†–ö–ê –ù–ê –í–ê–õ–ò–î–ù–û–°–¢–¨ –í–†–ê–ì–ê –ò –ï–ì–û –°–¢–ê–¢–ò–°–¢–ò–ö
	if not is_instance_valid(current_enemy) or not current_enemy_stats:
		end_battle(false)
		return
		
	var effective_stats = player_stats_instance.get_effective_stats()
	
	_update_stat_display(player_stats_container, "–ò–≥—Ä–æ–∫", 
		player_stats_instance.current_health, player_stats_instance.get_max_health(),
		effective_stats["strength"],      # ‚Üê –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Å–∏–ª–∞
		effective_stats["fortitude"],     # ‚Üê –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –∫—Ä–µ–ø–æ—Å—Ç—å
		effective_stats["endurance"],     # ‚Üê –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å
		effective_stats["luck"]           # ‚Üê –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —É–¥–∞—á–∞
	)
	
	# –ü–ï–†–ï–î–ê–ï–ú –†–ï–ê–õ–¨–ù–´–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –º–æ–Ω—Å—Ç—Ä–∞
	_update_stat_display(enemy_stats, current_enemy_stats.enemy_name, 
		current_enemy_stats.current_health, current_enemy_stats.get_max_health(),
		current_enemy_stats.stats_system.strength,        # ‚Üê –†–µ–∞–ª—å–Ω–∞—è —Å–∏–ª–∞
		current_enemy_stats.stats_system.fortitude,       # ‚Üê –†–µ–∞–ª—å–Ω–∞—è –∫—Ä–µ–ø–æ—Å—Ç—å  
		current_enemy_stats.stats_system.endurance,        # ‚Üê –†–µ–∞–ª—å–Ω–∞—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å
		current_enemy_stats.stats_system.luck             # ‚Üê –î–û–ë–ê–í–õ–Ø–ï–ú –£–î–ê–ß–£
	)

func _update_stat_display(container: VBoxContainer, name: String, 
						 health: int, max_health: int, 
						 strength: int, fortitude: int, endurance: int, luck: int):  # ‚Üê –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã!
	for child in container.get_children():
		child.queue_free()
	
	var name_label = Label.new()
	name_label.text = name
	container.add_child(name_label)
	
	var health_label = Label.new()
	health_label.text = "HP: %d/%d ‚ù§Ô∏è" % [health, max_health]
	container.add_child(health_label)
	
	# –ü–û–ö–ê–ó–´–í–ê–ï–ú –†–ï–ê–õ–¨–ù–´–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò
	var strength_label = Label.new()
	strength_label.text = "–°–∏–ª–∞: %d ‚öîÔ∏è" % strength
	container.add_child(strength_label)
	
	var fortitude_label = Label.new()
	fortitude_label.text = "–ö—Ä–µ–ø–æ—Å—Ç—å: %d üõ°Ô∏è" % fortitude
	container.add_child(fortitude_label)
	
	var endurance_label = Label.new()
	endurance_label.text = "–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: %d üí™" % endurance
	container.add_child(endurance_label)

	var luck_label = Label.new()
	luck_label.text = "–£–¥–∞—á–∞: %d üé≤" % luck
	container.add_child(luck_label)

func _on_timer_timeout():
	# –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ —É–º–µ—Ä - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –±–æ–π
	if player_stats_instance.current_health <= 0:
		end_battle(false)
		return
	
	if is_player_turn:
		player_attack()
	else:
		enemy_attack()
	
	update_stats()
	
	# –ü–†–û–í–ï–†–ö–ê –ø–æ—Å–ª–µ –∞—Ç–∞–∫–∏
	if not is_instance_valid(current_enemy) or not current_enemy_stats:
		end_battle(false)
		return
	
	# –ü–†–û–í–ï–†–ö–ê –∑–¥–æ—Ä–æ–≤—å—è —á–µ—Ä–µ–∑ MonsterStats
	if current_enemy_stats.current_health <= 0:
		end_battle(true)
	elif player_stats_instance.current_health <= 0:
		end_battle(false)
	else:
		is_player_turn = !is_player_turn
		timer.start(1.0)

func get_random_attack_message(messages_array: Array) -> String:
	return messages_array[randi() % messages_array.size()]

func player_attack():
	if not is_instance_valid(current_enemy) or not current_enemy_stats:
		end_battle(false)
		return
	
	# –†–ê–°–ß–ï–¢ –£–†–û–ù–ê
	var base_damage = player_stats_instance.get_effective_damage()  # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –î–û–õ–ñ–ù–ê —É—á–∏—Ç—ã–≤–∞—Ç—å effective_stats
	var enemy_defense = current_enemy_stats.get_defense()
	var actual_damage = max(1, base_damage - enemy_defense)
	var crit_chance = player_stats_instance.get_crit_chance_with_modifiers()
	
	
	
	if randf() < crit_chance:
		var critical_damage = int((base_damage * PLAYER_CRITICAL_MULTIPLIER) - enemy_defense)
		critical_damage = max(1, critical_damage)
		var message = get_random_attack_message(player_critical_messages) % critical_damage
		battle_log.text += message + "\n"
		current_enemy_stats.take_damage(critical_damage)
	else:
		# –ü–û–ö–ê–ó–´–í–ê–ï–ú –§–ê–ö–¢–ò–ß–ï–°–ö–ò–ô —É—Ä–æ–Ω (–ø–æ—Å–ª–µ –∑–∞—â–∏—Ç—ã)
		var message = get_random_attack_message(player_attack_messages) % actual_damage
		battle_log.text += message + "\n"
		current_enemy_stats.take_damage(actual_damage)

func enemy_attack():
	if not is_instance_valid(current_enemy) or not current_enemy_stats:
		end_battle(false)
		return
	
	# –†–ê–°–ß–ï–¢ –£–†–û–ù–ê
	var base_damage = current_enemy_stats.get_damage()
	var player_defense = player_stats_instance.get_effective_defense()
	var actual_damage = max(1, base_damage - player_defense)
	var crit_chance = current_enemy_stats.stats_system.get_crit_chance()
	
	if randf() < crit_chance:
		var critical_damage = int((base_damage * ENEMY_CRITICAL_MULTIPLIER) - player_defense)
		critical_damage = max(1, critical_damage)
		var message = get_random_attack_message(enemy_critical_messages) % [current_enemy_stats.enemy_name, critical_damage]
		battle_log.text += message + "\n"
		player_stats_instance.take_damage(critical_damage)
	else:
		var message = get_random_attack_message(enemy_attack_messages) % [current_enemy_stats.enemy_name, actual_damage]
		battle_log.text += message + "\n"
		player_stats_instance.take_damage(actual_damage)

func end_battle(victory: bool):
	if victory and current_enemy_stats:
		var exp_gained = current_enemy_stats.exp_reward
		player_stats_instance.add_exp(exp_gained)
		# –ü–ï–†–ï–ú–ï–©–ê–ï–ú –≤—ã–∑–æ–≤ —Å—Ç–∞—Ç—É—Å–æ–≤ –í–ù–£–¢–†–¨ —É—Å–ª–æ–≤–∏—è victory
		player_stats_instance.apply_post_battle_effects()
		# ‚Üê –î–û–ë–ê–í–õ–Ø–ï–ú –ü–û–î–°–ß–ï–¢ –£–ë–ò–ô–°–¢–í
		player_stats_instance.add_monster_kill()
		
		# ‚Üê –ü–†–û–í–ï–†–Ø–ï–ú BAD_LUCK –î–õ–Ø –°–û–û–ë–©–ï–ù–ò–Ø
		var has_bad_luck = false
		var has_lucky_day = false
		for status in player_stats_instance.active_statuses:
			if status.id == "bad_luck":
				has_bad_luck = true
			if status.id == "lucky_day":
				has_lucky_day = true
		
		if has_bad_luck and has_lucky_day:
			battle_log.text += "[color=#ffaa00]–ü–æ–±–µ–¥–∞! –ü–æ–ª—É—á–µ–Ω–æ %d –æ–ø—ã—Ç–∞ (–î–µ–Ω—å –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π!).[/color]\n" % exp_gained
		elif  has_bad_luck:
			battle_log.text += "[color=#ffcc00]–ü–æ–±–µ–¥–∞! –ü–æ–ª—É—á–µ–Ω–æ %d –æ–ø—ã—Ç–∞ (–£–∂–∞—Å–Ω—ã–π –¥–µ–Ω—å).[/color]\n" % exp_gained
		elif has_lucky_day:
			battle_log.text += "[color=#00ff00]–ü–æ–±–µ–¥–∞! –ü–æ–ª—É—á–µ–Ω–æ %d –æ–ø—ã—Ç–∞ (–£–¥–∞—á–Ω—ã–π –¥–µ–Ω—å).[/color]\n" % exp_gained
		else:
			battle_log.text += "[color=#00ff00]–ü–æ–±–µ–¥–∞! –ü–æ–ª—É—á–µ–Ω–æ %d –æ–ø—ã—Ç–∞.[/color]\n" % exp_gained
		
		if is_instance_valid(current_enemy):
			current_enemy.queue_free()
	else:
		battle_log.text += "[color=#ff0000]–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏...[/color]\n"
		
	timer.stop()
	# ‚Üê –î–û–ë–ê–í–õ–Ø–ï–ú –¢–ê–ô–ú–ï–† –ü–ê–£–ó–´ –î–õ–Ø –ß–¢–ï–ù–ò–Ø
	await get_tree().create_timer(2.5).timeout
	
	# ‚Üê –í–´–ó–´–í–ê–ï–ú –ü–†–û–ö–ê–ß–ö–£ –ü–û–°–õ–ï –ë–û–Ø
	if victory and player_stats_instance:
		player_stats_instance.complete_level_up_after_battle()
	
	hide()
	_disable_menu_button(false)
	battle_ended.emit(victory)
	current_enemy = null
	current_enemy_stats = null


func _disable_menu_button(disabled: bool):
	var menu_button = get_tree().get_first_node_in_group("menu_button")
	if menu_button:
		menu_button.disabled = disabled
		# –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è
		if disabled:
			menu_button.modulate = Color(1, 1, 1, 0.5)
		else:
			menu_button.modulate = Color(1, 1, 1, 1)
