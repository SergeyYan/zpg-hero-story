#BattleSystem.gd
extends CanvasLayer

signal battle_ended(victory: bool)

const PLAYER_CRITICAL_MULTIPLIER := 2.0
const ENEMY_CRITICAL_MULTIPLIER := 1.5

@onready var player_stats_container: VBoxContainer = $StatsPlayer/PlayerStats
@onready var enemy_stats: VBoxContainer = $StatsMonster/EnemyStats
@onready var battle_log: RichTextLabel = $BattleUI/BattleLog
@onready var timer: Timer = $Timer
@onready var stats_player: Control = $StatsPlayer
@onready var stats_monster: Control = $StatsMonster
@onready var battle_ui: Control = $BattleUI

# ‚Üê –ù–û–í–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –î–õ–Ø –ê–î–ê–ü–¢–ò–í–ù–û–°–¢–ò
var screen_size: Vector2
var is_mobile: bool = false
var base_font_size: int = 14

# ‚Üê –ù–û–í–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –î–õ–Ø –§–ò–ö–°–ò–†–û–í–ê–ù–ù–û–ô –®–ò–†–ò–ù–´
var stats_container_width: int = 200
var label_min_width: int = 180

var player_stats_instance: PlayerStats
var current_enemy: Node = null
var current_enemy_stats: MonsterStats = null
var is_player_turn: bool = true

var player_attack_messages = [
	"[color=#ff6b6b]–ì–µ—Ä–æ–π –Ω–∞–Ω–µ—Å ‚öîÔ∏è %d —É—Ä–æ–Ω–∞![/color]",
	"[color=#ff6b6b]–ì–µ—Ä–æ–π —Å —Ä–∞–∑–±–µ–≥—É —É–¥–∞—Ä–∏–ª –Ω–∞ ‚öîÔ∏è %d —É—Ä–æ–Ω–∞![/color]",
	"[color=#ff6b6b]–ì–µ—Ä–æ–π –Ω–∞ –æ—Ç–º–∞—à—å —É–¥–∞—Ä–∏–ª –Ω–∞ ‚öîÔ∏è %d —É—Ä–æ–Ω–∞![/color]", 
	"[color=#ff6b6b]–ì–µ—Ä–æ–π –Ω–∞–Ω–µ—Å –º–æ—â–Ω—ã–π —É–¥–∞—Ä –Ω–∞ ‚öîÔ∏è %d —É—Ä–æ–Ω–∞![/color]",
	"[color=#ff6b6b]–ì–µ—Ä–æ–π –±—Ä–æ—Å–∏–ª –∫–∞–º–µ–Ω—å –≤ –≥–æ–ª–æ–≤—É –Ω–∞ ‚öîÔ∏è %d —É—Ä–æ–Ω–∞![/color]",
	"[color=#ff6b6b]–ì–µ—Ä–æ–π —É–ø–∞–ª –Ω–∞ –∫–æ–ª–µ–Ω–∫—É –≤—Ä–∞–≥–∞ –∏ –Ω–∞–Ω–µ—Å–ª–∏ ‚öîÔ∏è %d —É—Ä–æ–Ω–∞![/color]",
	"[color=#ff6b6b]–ì–µ—Ä–æ–π –ø–ª—é–Ω—É–ª –ø—Ä—è–º–æ –≤ –±—É–±–µ–Ω –Ω–∞ ‚öîÔ∏è %d —É—Ä–æ–Ω–∞![/color]",
	"[color=#ff6b6b]–†–∞–∑—è—â–∏–π —É–¥–∞—Ä –≥–µ—Ä–æ—è –≤ –ø–∞—Ö –Ω–∞ ‚öîÔ∏è %d —É—Ä–æ–Ω–∞![/color]",
	"[color=#ff6b6b]–°–æ–∫—Ä—É—à–∏—Ç–µ–ª—å–Ω—ã–π —É–¥–∞—Ä –ø–æ —Å–∞–º–æ–ª—é–±–∏—é –≤—Ä–∞–≥–∞ –Ω–∞ ‚öîÔ∏è %d —É—Ä–æ–Ω–∞![/color]",
	"[color=#ff6b6b]–í—Ä–∞–≥ —Å–ø–æ—Ç—ã–∫–Ω—É–ª—Å—è –∏ –ø–æ–ª—É—á–∏–ª ‚öîÔ∏è %d —É—Ä–æ–Ω–∞![/color]"
]

var enemy_attack_messages = [
	"[color=#ffd93d]%s –Ω–∞–Ω–µ—Å –≤–∞–º ‚öîÔ∏è %d —É—Ä–æ–Ω–∞![/color]",
	"[color=#ffd93d]%s –∞—Ç–∞–∫—É–µ—Ç –∏ –Ω–∞–Ω–æ—Å–∏—Ç ‚öîÔ∏è %d —É—Ä–æ–Ω–∞![/color]",
	"[color=#ffd93d]%s –±—å–µ—Ç –≤–∞—Å –Ω–∞ ‚öîÔ∏è %d —É—Ä–æ–Ω–∞![/color]",
	"[color=#ffd93d]–ê—Ç–∞–∫–∞ %s–∞ –≤ –≥–æ–ª–æ–≤—É –Ω–∞–Ω–æ—Å–∏—Ç ‚öîÔ∏è %d —É—Ä–æ–Ω–∞![/color]",
	"[color=#ffd93d]%s —Ü–∞—Ä–∞–ø–∞–µ—Ç –≤–∞—Å –Ω–∞ ‚öîÔ∏è %d —É—Ä–æ–Ω–∞![/color]",
	"[color=#ffd93d]%s –∫—É—Å–∞–µ—Ç –≤–∞—Å –Ω–∞ ‚öîÔ∏è %d —É—Ä–æ–Ω–∞![/color]",
	"[color=#ffd93d]–©–µ–ª—á–æ–∫ %s–∞ –Ω–∞–Ω–æ—Å–∏—Ç ‚öîÔ∏è %d —É—Ä–æ–Ω–∞![/color]",
	"[color=#ffd93d]%s —Ç–æ–ª–∫–∞–µ—Ç –≤–∞—Å –Ω–∞ ‚öîÔ∏è %d —É—Ä–æ–Ω–∞![/color]",
	"[color=#ffd93d]–ë—Ä–æ—Å–æ–∫ –ø—ã–ª–∏ %s–∞ –Ω–∞–Ω–æ—Å–∏—Ç ‚öîÔ∏è %d —É—Ä–æ–Ω–∞![/color]",
	"[color=#ffd93d]%s –ø—Ä—ã–≥–∞–µ—Ç –≤–∞–º –Ω–∞ —à–µ—é, –Ω–∞–Ω–µ—Å–µ–Ω ‚öîÔ∏è %d —É—Ä–æ–Ω–∞ –ø–æ—è—Å–Ω–∏—Ü–µ![/color]"
]

var player_critical_messages = [
	"[color=#ff0000][b]üî• –ì–ï–†–û–ô –ù–ê–ù–û–°–ò–¢ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–î–ê–†! %d —É—Ä–æ–Ω–∞! üî•[/b][/color]",
	"[color=#ff0000][b]üí• –ì–ï–†–û–ô –ù–ê–ù–û–°–ò–¢ –°–ú–ï–†–¢–ï–õ–¨–ù–´–ô –£–î–ê–†! %d —É—Ä–æ–Ω–∞! üí•[/b][/color]",
	"[color=#ff0000][b]‚≠ê –ì–ï–†–û–ô –î–ï–õ–ê–ï–¢ –ò–î–ï–ê–õ–¨–ù–´–ô –£–î–ê–†! %d —É—Ä–æ–Ω–∞! ‚≠ê[/b][/color]"
]

var enemy_critical_messages = [
	"[color=#ffcc00][b]üî• %s –ù–ê–ù–û–°–ò–¢ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–î–ê–†! %d —É—Ä–æ–Ω–∞! üî•[/b][/color]",
	"[color=#ffcc00][b]üí• %s –ù–ê–ù–û–°–ò–¢ –°–ú–ï–†–¢–ï–õ–¨–ù–´–ô –£–î–ê–†! %d —É—Ä–æ–Ω–∞! üí•[/b][/color]",
	"[color=#ffcc00][b]‚≠ê %s –î–ï–õ–ê–ï–¢ –ò–î–ï–ê–õ–¨–ù–´–ô –£–î–ê–†! %d —É—Ä–æ–Ω–∞! ‚≠ê[/b][/color]"
]

func _ready():
	add_to_group("battle_system")
	
	# ‚Üê –û–ü–†–ï–î–ï–õ–Ø–ï–ú –¢–ò–ü –£–°–¢–†–û–ô–°–¢–í–ê
	_detect_device_type()
	# ‚Üê –ù–ê–°–¢–†–ê–ò–í–ê–ï–ú –ê–î–ê–ü–¢–ò–í–ù–´–ô –ò–ù–¢–ï–†–§–ï–ô–°
	_setup_responsive_ui()
	
	player_stats_instance = get_tree().get_first_node_in_group("player_stats")
	if not player_stats_instance:
		push_error("PlayerStats not found!")
	
	hide()

# ‚Üê –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –¢–ò–ü–ê –£–°–¢–†–û–ô–°–¢–í–ê
func _detect_device_type():
	screen_size = get_viewport().get_visible_rect().size
	is_mobile = screen_size.x < 790
	
	if is_mobile:
		print("BattleSystem: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
		base_font_size = 12
		stats_container_width = 180
		label_min_width = 140
	else:
		print("BattleSystem: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥–µ—Å–∫—Ç–æ–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
		base_font_size = 14
		stats_container_width = 220
		label_min_width = 180

# ‚Üê –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ù–ê–°–¢–†–û–ô–ö–ê –ê–î–ê–ü–¢–ò–í–ù–û–ì–û –ò–ù–¢–ï–†–§–ï–ô–°–ê
func _setup_responsive_ui():
	if is_mobile:
		_setup_mobile_layout()
	else:
		_setup_desktop_layout()
	
	_update_font_sizes()

# ‚Üê –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ú–û–ë–ò–õ–¨–ù–ê–Ø –ö–û–ú–ü–û–ù–û–í–ö–ê
func _setup_mobile_layout():
	print("BattleSystem: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–π –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏")
	
	# –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
	if stats_player:
		stats_player.visible = false
	
	# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º BattleLog - —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –ø–æ —à–∏—Ä–∏–Ω–µ –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É
	if battle_ui and battle_log:
		battle_ui.size = Vector2(screen_size.x * 0.95, screen_size.y * 0.3)
		battle_ui.position = Vector2(
			(screen_size.x - battle_ui.size.x) / 2,
			screen_size.y * 0.25
		)
		
		# BattleLog –∑–∞–Ω–∏–º–∞–µ—Ç –≤—Å—é –¥–æ—Å—Ç—É–ø–Ω—É—é –ø–ª–æ—â–∞–¥—å
		battle_log.size = battle_ui.size
		battle_log.position = Vector2.ZERO
		
		# –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö —Å—Ç—Ä–æ–∫ (4-5 —Å—Ç—Ä–æ–∫)
		battle_log.scroll_following = false
		battle_log.fit_content = false
	
	# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º EnemyStats - –ø–æ —Ü–µ–Ω—Ç—Ä—É –Ω–∏–∂–µ BattleLog
	if stats_monster:
		stats_monster.visible = true
		stats_monster.size = Vector2(stats_container_width, screen_size.y * 0.28)
		stats_monster.position = Vector2(
			(screen_size.x - stats_monster.size.x) / 2,
			screen_size.y * 0.55  # –ù–∏–∂–µ BattleLog
		)

# ‚Üê –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –î–ï–°–ö–¢–û–ü–ù–ê–Ø –ö–û–ú–ü–û–ù–û–í–ö–ê
func _setup_desktop_layout():
	print("BattleSystem: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–π –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏")
	
	# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ
	if stats_player:
		stats_player.visible = true
		stats_player.size = Vector2(stats_container_width, 150)
		stats_player.position = Vector2(
			(screen_size.x - stats_monster.size.x) * 0.29,  # –õ–µ–≤–∞—è —á–∞—Å—Ç—å —ç–∫—Ä–∞–Ω–∞
			(screen_size.y - stats_player.size.y) / 2.15
		)
	
	if stats_monster:
		stats_monster.visible = true
		stats_monster.size = Vector2(stats_container_width, 150)
		stats_monster.position = Vector2(
			(screen_size.x - stats_monster.size.x) * 0.71,  # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å —ç–∫—Ä–∞–Ω–∞
			(screen_size.y - stats_monster.size.y) / 2.15
		)
		
	# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
	if battle_ui:
		battle_ui.size = Vector2(600, 200)
		battle_ui.position = Vector2(
			(screen_size.x - battle_ui.size.x) / 2,
			screen_size.y / 1.7  # –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å —ç–∫—Ä–∞–Ω–∞
		)
		
		if battle_log:
			battle_log.size = battle_ui.size
			battle_log.position = Vector2.ZERO

# ‚Üê –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–ë–ù–û–í–õ–ï–ù–ò–ï –†–ê–ó–ú–ï–†–û–í –®–†–ò–§–¢–û–í
func _update_font_sizes():
	if battle_log:
		battle_log.add_theme_font_size_override("normal_font_size", base_font_size)
	
	# –û–±–Ω–æ–≤–ª—è–µ–º —à—Ä–∏—Ñ—Ç—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	_update_stats_font_sizes(player_stats_container)
	_update_stats_font_sizes(enemy_stats)

# ‚Üê –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–ë–ù–û–í–õ–ï–ù–ò–ï –®–†–ò–§–¢–û–í –°–¢–ê–¢–ò–°–¢–ò–ö–ò
func _update_stats_font_sizes(container: VBoxContainer):
	if not container:
		return
	
	for child in container.get_children():
		if child is Label:
			child.add_theme_font_size_override("font_size", base_font_size)
			# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
			child.custom_minimum_size.x = label_min_width
			# –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é
			child.horizontal_alignment = HORIZONTAL_ALIGNMENT_LEFT

func start_battle(enemy: Node, enemy_stats_ref: MonsterStats):
	if player_stats_instance.current_health <= 0:
		return
	
	# –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å enemy
	if not is_instance_valid(enemy) or not is_instance_valid(enemy_stats_ref):
		return
	
	# –ó–ê–©–ò–¢–ê: –Ω–µ –Ω–∞—á–∏–Ω–∞–µ–º –±–æ–π –≤ –ø–µ—Ä–≤—ã–µ —Å–µ–∫—É–Ω–¥—ã –∏–≥—Ä—ã
	if get_tree().get_frame() < 60:
		return
	
	# ‚Üê –û–ë–ù–û–í–õ–Ø–ï–ú –†–ê–ó–ú–ï–†–´ –ü–ï–†–ï–î –ü–û–ö–ê–ó–û–ú
	_detect_device_type()
	_setup_responsive_ui()
	
	current_enemy = enemy
	current_enemy_stats = enemy_stats_ref
	show()
	get_tree().paused = true
	_disable_menu_button(true)
	update_stats()
	battle_log.text = "–ë–æ–π –Ω–∞—á–∞–ª—Å—è –ø—Ä–æ—Ç–∏–≤ %s!\n" % current_enemy_stats.enemy_name
	timer.start(1.0)

func update_stats():
	# –ü–†–û–í–ï–†–ö–ê –ù–ê –í–ê–õ–ò–î–ù–û–°–¢–¨ –í–†–ê–ì–ê –ò –ï–ì–û –°–¢–ê–¢–ò–°–¢–ò–ö
	if not is_instance_valid(current_enemy) or not current_enemy_stats:
		end_battle(false)
		return
		
	var effective_stats = player_stats_instance.get_effective_stats()
	
	# –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –≤–∏–¥–∏–º–∞
	if stats_player and stats_player.visible:
		_update_stat_display(player_stats_container, "–ò–≥—Ä–æ–∫", 
			player_stats_instance.current_health, player_stats_instance.get_max_health(),
			effective_stats["strength"],
			effective_stats["fortitude"],
			effective_stats["endurance"],
			effective_stats["luck"]
		)
	
	# –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Ä–∞–≥–∞
	_update_stat_display(enemy_stats, current_enemy_stats.enemy_name, 
		current_enemy_stats.current_health, current_enemy_stats.get_max_health(),
		current_enemy_stats.stats_system.strength,
		current_enemy_stats.stats_system.fortitude,
		current_enemy_stats.stats_system.endurance,
		current_enemy_stats.stats_system.luck
	)

func _update_stat_display(container: VBoxContainer, name: String, 
						 health: int, max_health: int, 
						 strength: int, fortitude: int, endurance: int, luck: int):
	for child in container.get_children():
		child.queue_free()
	
	# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —à–∏—Ä–∏–Ω—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
	container.custom_minimum_size.x = stats_container_width
	container.size.x = stats_container_width
	
	var name_label = Label.new()
	name_label.text = name
	name_label.add_theme_font_size_override("font_size", base_font_size)
	name_label.custom_minimum_size.x = label_min_width
	name_label.horizontal_alignment = HORIZONTAL_ALIGNMENT_LEFT
	container.add_child(name_label)
	
	var health_label = Label.new()
	health_label.text = "HP: %d/%d ‚ù§Ô∏è" % [health, max_health]
	health_label.add_theme_font_size_override("font_size", base_font_size)
	health_label.custom_minimum_size.x = label_min_width
	health_label.horizontal_alignment = HORIZONTAL_ALIGNMENT_LEFT
	container.add_child(health_label)
	
	# –ü–û–ö–ê–ó–´–í–ê–ï–ú –†–ï–ê–õ–¨–ù–´–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò
	var strength_label = Label.new()
	strength_label.text = "–°–∏–ª–∞: %d ‚öîÔ∏è" % strength
	strength_label.add_theme_font_size_override("font_size", base_font_size)
	strength_label.custom_minimum_size.x = label_min_width
	strength_label.horizontal_alignment = HORIZONTAL_ALIGNMENT_LEFT
	container.add_child(strength_label)
	
	var fortitude_label = Label.new()
	fortitude_label.text = "–ö—Ä–µ–ø–æ—Å—Ç—å: %d üõ°Ô∏è" % fortitude
	fortitude_label.add_theme_font_size_override("font_size", base_font_size)
	fortitude_label.custom_minimum_size.x = label_min_width
	fortitude_label.horizontal_alignment = HORIZONTAL_ALIGNMENT_LEFT
	container.add_child(fortitude_label)
	
	var endurance_label = Label.new()
	endurance_label.text = "–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: %d üí™" % endurance
	endurance_label.add_theme_font_size_override("font_size", base_font_size)
	endurance_label.custom_minimum_size.x = label_min_width
	endurance_label.horizontal_alignment = HORIZONTAL_ALIGNMENT_LEFT
	container.add_child(endurance_label)

	var luck_label = Label.new()
	luck_label.text = "–£–¥–∞—á–∞: %d üé≤" % luck
	luck_label.add_theme_font_size_override("font_size", base_font_size)
	luck_label.custom_minimum_size.x = label_min_width
	luck_label.horizontal_alignment = HORIZONTAL_ALIGNMENT_LEFT
	container.add_child(luck_label)

func _on_timer_timeout():
	# –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ —É–º–µ—Ä - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –±–æ–π
	if player_stats_instance.current_health <= 0:
		end_battle(false)
		return
	
	if is_player_turn:
		player_attack()
	else:
		enemy_attack()
	
	update_stats()
	
	# –ü–†–û–í–ï–†–ö–ê –ø–æ—Å–ª–µ –∞—Ç–∞–∫–∏
	if not is_instance_valid(current_enemy) or not current_enemy_stats:
		end_battle(false)
		return
	
	# –ü–†–û–í–ï–†–ö–ê –∑–¥–æ—Ä–æ–≤—å—è —á–µ—Ä–µ–∑ MonsterStats
	if current_enemy_stats.current_health <= 0:
		end_battle(true)
	elif player_stats_instance.current_health <= 0:
		end_battle(false)
	else:
		is_player_turn = !is_player_turn
		timer.start(1.0)

func get_random_attack_message(messages_array: Array) -> String:
	return messages_array[randi() % messages_array.size()]

func player_attack():
	if not is_instance_valid(current_enemy) or not current_enemy_stats:
		end_battle(false)
		return
	
	# –†–ê–°–ß–ï–¢ –£–†–û–ù–ê
	var base_damage = player_stats_instance.get_effective_damage()
	var enemy_defense = current_enemy_stats.get_defense()
	var actual_damage = max(1, base_damage - enemy_defense)
	var crit_chance = player_stats_instance.get_crit_chance_with_modifiers()
	
	if randf() < crit_chance:
		var critical_damage = int((base_damage * PLAYER_CRITICAL_MULTIPLIER) - enemy_defense)
		critical_damage = max(1, critical_damage)
		var message = get_random_attack_message(player_critical_messages) % critical_damage
		battle_log.text += message + "\n"
		current_enemy_stats.take_damage(critical_damage)
	else:
		var message = get_random_attack_message(player_attack_messages) % actual_damage
		battle_log.text += message + "\n"
		current_enemy_stats.take_damage(actual_damage)

func enemy_attack():
	if not is_instance_valid(current_enemy) or not current_enemy_stats:
		end_battle(false)
		return
	
	# –†–ê–°–ß–ï–¢ –£–†–û–ù–ê
	var base_damage = current_enemy_stats.get_damage()
	var player_defense = player_stats_instance.get_effective_defense()
	var actual_damage = max(1, base_damage - player_defense)
	var crit_chance = current_enemy_stats.stats_system.get_crit_chance()
	
	if randf() < crit_chance:
		var critical_damage = int((base_damage * ENEMY_CRITICAL_MULTIPLIER) - player_defense)
		critical_damage = max(1, critical_damage)
		var message = get_random_attack_message(enemy_critical_messages) % [current_enemy_stats.enemy_name, critical_damage]
		battle_log.text += message + "\n"
		player_stats_instance.take_damage(critical_damage)
	else:
		var message = get_random_attack_message(enemy_attack_messages) % [current_enemy_stats.enemy_name, actual_damage]
		battle_log.text += message + "\n"
		player_stats_instance.take_damage(actual_damage)

func end_battle(victory: bool):
	if victory and current_enemy_stats:
		var exp_gained = current_enemy_stats.exp_reward
		player_stats_instance.add_exp(exp_gained)
		player_stats_instance.apply_post_battle_effects()
		player_stats_instance.add_monster_kill()
		
		var has_bad_luck = false
		var has_lucky_day = false
		for status in player_stats_instance.active_statuses:
			if status.id == "bad_luck":
				has_bad_luck = true
			if status.id == "lucky_day":
				has_lucky_day = true
		
		if has_bad_luck and has_lucky_day:
			battle_log.text += "[color=#ffaa00]–ü–æ–±–µ–¥–∞! –ü–æ–ª—É—á–µ–Ω–æ %d –æ–ø—ã—Ç–∞ (–î–µ–Ω—å –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π!).[/color]\n" % exp_gained
		elif has_bad_luck:
			battle_log.text += "[color=#ffcc00]–ü–æ–±–µ–¥–∞! –ü–æ–ª—É—á–µ–Ω–æ %d –æ–ø—ã—Ç–∞ (–£–∂–∞—Å–Ω—ã–π –¥–µ–Ω—å).[/color]\n" % exp_gained
		elif has_lucky_day:
			battle_log.text += "[color=#00ff00]–ü–æ–±–µ–¥–∞! –ü–æ–ª—É—á–µ–Ω–æ %d –æ–ø—ã—Ç–∞ (–£–¥–∞—á–Ω—ã–π –¥–µ–Ω—å).[/color]\n" % exp_gained
		else:
			battle_log.text += "[color=#00ff00]–ü–æ–±–µ–¥–∞! –ü–æ–ª—É—á–µ–Ω–æ %d –æ–ø—ã—Ç–∞.[/color]\n" % exp_gained
		
		if is_instance_valid(current_enemy):
			current_enemy.queue_free()
	else:
		battle_log.text += "[color=#ff0000]–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏...[/color]\n"
		
	timer.stop()
	await get_tree().create_timer(2.5).timeout
	
	if victory and player_stats_instance:
		player_stats_instance.complete_level_up_after_battle()
	
	hide()
	_disable_menu_button(false)
	battle_ended.emit(victory)
	current_enemy = null
	current_enemy_stats = null

func _disable_menu_button(disabled: bool):
	var menu_button = get_tree().get_first_node_in_group("menu_button")
	if menu_button:
		menu_button.disabled = disabled
		if disabled:
			menu_button.modulate = Color(1, 1, 1, 0.5)
		else:
			menu_button.modulate = Color(1, 1, 1, 1)
