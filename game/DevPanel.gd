# DevPanel.gd
extends CanvasLayer

@onready var dev_panel: Panel = $DevPanel
@onready var status_grid: GridContainer = $DevPanel/MarginContainer/ScrollContainer/VBoxContainer/StatusSection/StatusGrid
@onready var strength_spin: SpinBox = $DevPanel/MarginContainer/ScrollContainer/VBoxContainer/StatsContainer/StrengthSpin
@onready var fortitude_spin: SpinBox = $DevPanel/MarginContainer/ScrollContainer/VBoxContainer/StatsContainer/FortitudeSpin
@onready var agility_spin: SpinBox = $DevPanel/MarginContainer/ScrollContainer/VBoxContainer/StatsContainer/AgilitySpin
@onready var endurance_spin: SpinBox = $DevPanel/MarginContainer/ScrollContainer/VBoxContainer/StatsContainer/EnduranceSpin
@onready var luck_spin: SpinBox = $DevPanel/MarginContainer/ScrollContainer/VBoxContainer/StatsContainer/LuckSpin
@onready var apply_stats_button: Button = $DevPanel/MarginContainer/ScrollContainer/VBoxContainer/StatsContainer/ApplyStatsButton
@onready var heal_button: Button = $DevPanel/MarginContainer/ScrollContainer/VBoxContainer/ActionsContainer/HealButton
@onready var level_up_button: Button = $DevPanel/MarginContainer/ScrollContainer/VBoxContainer/ActionsContainer/LevelUpButton
@onready var add_exp_button: Button = $DevPanel/MarginContainer/ScrollContainer/VBoxContainer/ActionsContainer/AddExpButton
@onready var close_button: Button = $DevPanel/MarginContainer/ScrollContainer/VBoxContainer/CloseButton
@onready var scroll_container: ScrollContainer = $DevPanel/MarginContainer/ScrollContainer
@onready var main_vbox: VBoxContainer = $DevPanel/MarginContainer/ScrollContainer/VBoxContainer

# ‚Üê –ù–û–í–´–ï –°–°–´–õ–ö–ò
@onready var stats_container: GridContainer = $DevPanel/MarginContainer/ScrollContainer/VBoxContainer/StatsContainer
@onready var actions_container: HBoxContainer = $DevPanel/MarginContainer/ScrollContainer/VBoxContainer/ActionsContainer
@onready var status_section: VBoxContainer = $DevPanel/MarginContainer/ScrollContainer/VBoxContainer/StatusSection

var player_stats: PlayerStats
var secret_code: Array[String] = ["K", "O", "D"]
var current_input: Array[String] = []
var all_status_ids: Array[String] = []
var signals_connected: bool = false
var level_up_menu_open: bool = false

# ‚Üê –ù–û–í–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –î–õ–Ø –ê–î–ê–ü–¢–ò–í–ù–û–°–¢–ò
var is_mobile: bool = false
var screen_size: Vector2
var base_font_size: int = 12
var status_buttons: Dictionary = {}  # ‚Üê –•—Ä–∞–Ω–∏–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤

func _ready():
	# ‚Üê –ù–ê–°–¢–†–ê–ò–í–ê–ï–ú –í–ù–ï–®–ù–ò–ô –í–ò–î –ü–ê–ù–ï–õ–ò
	_setup_panel_style()
	
	# ‚Üê –û–ü–†–ï–î–ï–õ–Ø–ï–ú –¢–ò–ü –£–°–¢–†–û–ô–°–¢–í–ê
	_detect_device_type()
	
	# ‚Üê –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ü–†–ê–í–ò–õ–¨–ù–´–ô Z_INDEX –î–õ–Ø –ü–ê–ù–ï–õ–ò
	dev_panel.z_index = 1000
	self.layer = 1000
	
	dev_panel.visible = false
	
	# ‚Üê –î–ï–õ–ê–ï–ú –í–°–ï –≠–õ–ï–ú–ï–ù–¢–´ –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø–ú–ò –ò–ó –ü–ê–£–ó–´
	dev_panel.process_mode = Node.PROCESS_MODE_WHEN_PAUSED
	_set_children_process_mode(dev_panel, Node.PROCESS_MODE_WHEN_PAUSED)
	
	# ‚Üê –ü–û–î–ü–ò–°–´–í–ê–ï–ú–°–Ø –ù–ê –ò–ó–ú–ï–ù–ï–ù–ò–ï –†–ê–ó–ú–ï–†–ê –≠–ö–†–ê–ù–ê
	get_viewport().size_changed.connect(_on_viewport_size_changed)
	
	# ‚Üê –ù–ê–°–¢–†–ê–ò–í–ê–ï–ú –†–ê–ó–ú–ï–†–´ –ü–ê–ù–ï–õ–ò –í –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –û–¢ –£–°–¢–†–û–ô–°–¢–í–ê
	_setup_panel_size()
	
	# ‚Üê –°–û–ó–î–ê–ï–ú –°–ü–ò–°–û–ö –°–¢–ê–¢–£–°–û–í
	_create_status_grid()
	
	# ‚Üê –ù–ê–°–¢–†–ê–ò–í–ê–ï–ú –ê–î–ê–ü–¢–ò–í–ù–´–ô –ò–ù–¢–ï–†–§–ï–ô–°
	_setup_responsive_ui()
	
	if not signals_connected:
		_connect_signals()
		signals_connected = true
	
	add_to_group("dev_panel")

# ‚Üê –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ù–ê–°–¢–†–û–ô–ö–ê –°–¢–ò–õ–Ø –ü–ê–ù–ï–õ–ò
func _setup_panel_style():
	# –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è –ø–∞–Ω–µ–ª–∏ —Å —Ç–µ–º–Ω—ã–º —Ñ–æ–Ω–æ–º
	var panel_style = StyleBoxFlat.new()
	panel_style.bg_color = Color(0.1, 0.1, 0.1, 0.98)  # –¢–µ–º–Ω—ã–π —Ñ–æ–Ω —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
	panel_style.border_color = Color(0.4, 0.4, 0.4, 1.0)  # –°–≤–µ—Ç–ª–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
	panel_style.border_width_left = 2
	panel_style.border_width_top = 2
	panel_style.border_width_right = 2
	panel_style.border_width_bottom = 2
	panel_style.corner_radius_top_left = 12
	panel_style.corner_radius_top_right = 12
	panel_style.corner_radius_bottom_right = 12
	panel_style.corner_radius_bottom_left = 12
	panel_style.shadow_color = Color(0, 0, 0, 0.6)  # –¢–µ–Ω—å
	panel_style.shadow_size = 12
	panel_style.shadow_offset = Vector2(4, 4)
	
	# –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –∫ –ø–∞–Ω–µ–ª–∏
	dev_panel.add_theme_stylebox_override("panel", panel_style)
	
	# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫
	var button_style = StyleBoxFlat.new()
	button_style.bg_color = Color(0.2, 0.2, 0.2, 1.0)
	button_style.border_color = Color(0.5, 0.5, 0.5, 1.0)
	button_style.border_width_left = 1
	button_style.border_width_top = 1
	button_style.border_width_right = 1
	button_style.border_width_bottom = 1
	button_style.corner_radius_top_left = 6
	button_style.corner_radius_top_right = 6
	button_style.corner_radius_bottom_right = 6
	button_style.corner_radius_bottom_left = 6
	
	# –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –∫ –∫–Ω–æ–ø–∫–∞–º
	apply_stats_button.add_theme_stylebox_override("normal", button_style)
	heal_button.add_theme_stylebox_override("normal", button_style)
	level_up_button.add_theme_stylebox_override("normal", button_style)
	add_exp_button.add_theme_stylebox_override("normal", button_style)
	close_button.add_theme_stylebox_override("normal", button_style)
	
	# –°—Ç–∏–ª—å –¥–ª—è –Ω–∞–≤–µ–¥–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏
	var button_hover_style = button_style.duplicate()
	button_hover_style.bg_color = Color(0.3, 0.3, 0.3, 1.0)
	button_hover_style.border_color = Color(0.6, 0.6, 0.6, 1.0)
	
	apply_stats_button.add_theme_stylebox_override("hover", button_hover_style)
	heal_button.add_theme_stylebox_override("hover", button_hover_style)
	level_up_button.add_theme_stylebox_override("hover", button_hover_style)
	add_exp_button.add_theme_stylebox_override("hover", button_hover_style)
	close_button.add_theme_stylebox_override("hover", button_hover_style)
	
	# –°—Ç–∏–ª—å –¥–ª—è –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏
	var button_pressed_style = button_style.duplicate()
	button_pressed_style.bg_color = Color(0.4, 0.4, 0.4, 1.0)
	button_pressed_style.border_color = Color(0.7, 0.7, 0.7, 1.0)
	
	apply_stats_button.add_theme_stylebox_override("pressed", button_pressed_style)
	heal_button.add_theme_stylebox_override("pressed", button_pressed_style)
	level_up_button.add_theme_stylebox_override("pressed", button_pressed_style)
	add_exp_button.add_theme_stylebox_override("pressed", button_pressed_style)
	close_button.add_theme_stylebox_override("pressed", button_pressed_style)
	
	# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
	var font_color = Color(0.9, 0.9, 0.9, 1.0)  # –°–≤–µ—Ç–ª—ã–π —Ç–µ–∫—Å—Ç
	apply_stats_button.add_theme_color_override("font_color", font_color)
	heal_button.add_theme_color_override("font_color", font_color)
	level_up_button.add_theme_color_override("font_color", font_color)
	add_exp_button.add_theme_color_override("font_color", font_color)
	close_button.add_theme_color_override("font_color", font_color)
	
	# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è SpinBox
	var spinbox_style = StyleBoxFlat.new()
	spinbox_style.bg_color = Color(0.15, 0.15, 0.15, 1.0)
	spinbox_style.border_color = Color(0.5, 0.5, 0.5, 1.0)
	spinbox_style.border_width_left = 1
	spinbox_style.border_width_top = 1
	spinbox_style.border_width_right = 1
	spinbox_style.border_width_bottom = 1
	spinbox_style.corner_radius_top_left = 4
	spinbox_style.corner_radius_top_right = 4
	spinbox_style.corner_radius_bottom_right = 4
	spinbox_style.corner_radius_bottom_left = 4
	
	strength_spin.get_line_edit().add_theme_stylebox_override("normal", spinbox_style)
	fortitude_spin.get_line_edit().add_theme_stylebox_override("normal", spinbox_style)
	agility_spin.get_line_edit().add_theme_stylebox_override("normal", spinbox_style)
	endurance_spin.get_line_edit().add_theme_stylebox_override("normal", spinbox_style)
	luck_spin.get_line_edit().add_theme_stylebox_override("normal", spinbox_style)
	
	# –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ SpinBox
	var spinbox_font_color = Color(1.0, 1.0, 1.0, 1.0)
	strength_spin.get_line_edit().add_theme_color_override("font_color", spinbox_font_color)
	fortitude_spin.get_line_edit().add_theme_color_override("font_color", spinbox_font_color)
	agility_spin.get_line_edit().add_theme_color_override("font_color", spinbox_font_color)
	endurance_spin.get_line_edit().add_theme_color_override("font_color", spinbox_font_color)
	luck_spin.get_line_edit().add_theme_color_override("font_color", spinbox_font_color)
	
	# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è CheckBox (—Å—Ç–∞—Ç—É—Å—ã)
	var checkbox_style = StyleBoxFlat.new()
	checkbox_style.bg_color = Color(0.15, 0.15, 0.15, 1.0)
	checkbox_style.border_color = Color(0.4, 0.4, 0.4, 1.0)
	checkbox_style.border_width_left = 1
	checkbox_style.border_width_top = 1
	checkbox_style.border_width_right = 1
	checkbox_style.border_width_bottom = 1
	checkbox_style.corner_radius_top_left = 4
	checkbox_style.corner_radius_top_right = 4
	checkbox_style.corner_radius_bottom_right = 4
	checkbox_style.corner_radius_bottom_left = 4

# ‚Üê –§–£–ù–ö–¶–ò–Ø –°–û–ó–î–ê–ù–ò–Ø –°–ï–¢–ö–ò –°–¢–ê–¢–£–°–û–í
func _create_status_grid():
	# –û—á–∏—â–∞–µ–º —Å–µ—Ç–∫—É
	for child in status_grid.get_children():
		child.queue_free()
	status_buttons.clear()
	
	# –°–ª–æ–≤–∞—Ä—å emoji –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
	var status_emojis = {
		"well_fed": "üçñ", "good_shoes": "üëü", "inspired": "üí°",
		"adrenaline": "‚ö°", "lucky_day": "üçÄ", "potion_splash": "üß¥",
		"strange_mushroom": "üçÑ", "cloak_tent": "üëª", "mage_potion": "‚öóÔ∏è",
		"phoenix_feather": "üî•", "thinker": "ü§î", "sore_knees": "ü¶µ",
		"crying": "üò¢", "exhausted": "üò¥", "bad_luck": "‚òÇÔ∏è", 
		"minor_injury": "ü©π", "swamp_bog": "üü§", "snake_bite": "üêç",
		"stunned": "üí´", "sleepy": "üò™"
	}
	
	# –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã –ø–æ —Ç–≤–æ–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
	var status_categories = {
		"## –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–´–ï": [
			"good_shoes", "adrenaline", "potion_splash", "cloak_tent", 
			"phoenix_feather", "well_fed", "inspired", "strange_mushroom", "mage_potion"
		],
		"## –°–£–ü–ï–† –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–´–ï": [
			"lucky_day", "thinker"
		],
		"## –ù–ï–ì–ê–¢–ò–í–ù–´–ï": [
			"crying", "swamp_bog", "stunned", 
			"sore_knees", "exhausted", "minor_injury", "sleepy"
		],
		"## –°–£–ü–ï–† –û–¢–†–ò–¶–ê–¢–ï–õ–¨–ù–´–ï": [
			"bad_luck", "snake_bite"
		]
	}
	
	# –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –ª–µ–≤–æ–π –∏ –ø—Ä–∞–≤–æ–π –∫–æ–ª–æ–Ω–æ–∫
	var left_column = VBoxContainer.new()
	var right_column = VBoxContainer.new()
	
	left_column.name = "LeftColumn"
	right_column.name = "RightColumn"
	
	# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
	left_column.size_flags_horizontal = Control.SIZE_EXPAND_FILL
	right_column.size_flags_horizontal = Control.SIZE_EXPAND_FILL
	
	# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –≤ —Å–µ—Ç–∫—É
	status_grid.add_child(left_column)
	status_grid.add_child(right_column)
	
	# –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º
	var left_categories = ["## –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–´–ï", "## –°–£–ü–ï–† –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–´–ï"]
	var right_categories = ["## –ù–ï–ì–ê–¢–ò–í–ù–´–ï", "## –°–£–ü–ï–† –û–¢–†–ò–¶–ê–¢–ï–õ–¨–ù–´–ï"]
	
	# –°–æ–∑–¥–∞–µ–º –ª–µ–≤—É—é –∫–æ–ª–æ–Ω–∫—É (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã)
	for category in left_categories:
		if status_categories.has(category):
			_create_category_section(category, status_categories[category], left_column, status_emojis)
	
	# –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤—É—é –∫–æ–ª–æ–Ω–∫—É (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã)
	for category in right_categories:
		if status_categories.has(category):
			_create_category_section(category, status_categories[category], right_column, status_emojis)

# ‚Üê –§–£–ù–ö–¶–ò–Ø –°–û–ó–î–ê–ù–ò–Ø –ö–ê–¢–ï–ì–û–†–ò–ò
func _create_category_section(category_name: String, status_list: Array, parent_container: VBoxContainer, status_emojis: Dictionary):
	# –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	var category_label = Label.new()
	category_label.text = category_name.replace("## ", "")
	category_label.horizontal_alignment = HORIZONTAL_ALIGNMENT_CENTER
	category_label.add_theme_font_size_override("font_size", base_font_size + 2)
	category_label.size_flags_horizontal = Control.SIZE_EXPAND_FILL
	
	# –¶–≤–µ—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
	if "–ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–´–ï" in category_name:
		category_label.add_theme_color_override("font_color", Color(0.4, 0.8, 0.4, 1.0))  # –ó–µ–ª–µ–Ω—ã–π
	elif "–°–£–ü–ï–† –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–´–ï" in category_name:
		category_label.add_theme_color_override("font_color", Color(0.2, 1.0, 0.2, 1.0))  # –Ø—Ä–∫–æ-–∑–µ–ª–µ–Ω—ã–π
	elif "–ù–ï–ì–ê–¢–ò–í–ù–´–ï" in category_name:
		category_label.add_theme_color_override("font_color", Color(0.8, 0.4, 0.4, 1.0))  # –ö—Ä–∞—Å–Ω—ã–π
	else:  # –°–£–ü–ï–† –û–¢–†–ò–¶–ê–¢–ï–õ–¨–ù–´–ï
		category_label.add_theme_color_override("font_color", Color(1.0, 0.3, 0.3, 1.0))  # –Ø—Ä–∫–æ-–∫—Ä–∞—Å–Ω—ã–π
	
	parent_container.add_child(category_label)
	
	# –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	for status_id in status_list:
		var emoji = status_emojis.get(status_id, "‚ùì")
		var status_button = CheckBox.new()
		status_button.text = " " + emoji + " " + status_id
		status_button.add_theme_font_size_override("font_size", base_font_size)
		status_button.toggled.connect(_on_status_button_toggled.bind(status_id))
		status_button.mouse_default_cursor_shape = Control.CURSOR_POINTING_HAND
		
		# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è CheckBox
		var checkbox_style = StyleBoxFlat.new()
		checkbox_style.bg_color = Color(0.15, 0.15, 0.15, 1.0)
		checkbox_style.border_color = Color(0.4, 0.4, 0.4, 1.0)
		checkbox_style.border_width_left = 1
		checkbox_style.border_width_top = 1
		checkbox_style.border_width_right = 1
		checkbox_style.border_width_bottom = 1
		checkbox_style.corner_radius_top_left = 8
		checkbox_style.corner_radius_top_right = 8
		checkbox_style.corner_radius_bottom_right = 8
		checkbox_style.corner_radius_bottom_left = 8
		
		status_button.add_theme_stylebox_override("normal", checkbox_style)
		
		var checkbox_hover_style = checkbox_style.duplicate()
		checkbox_hover_style.bg_color = Color(0.2, 0.2, 0.2, 1.0)
		checkbox_hover_style.border_color = Color(0.6, 0.6, 0.6, 1.0)
		status_button.add_theme_stylebox_override("hover", checkbox_hover_style)
		
		var checkbox_pressed_style = checkbox_style.duplicate()
		# –¶–≤–µ—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
		if "–ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–´–ï" in category_name:
			checkbox_pressed_style.bg_color = Color(0.1, 0.4, 0.1, 1.0)  # –ó–µ–ª–µ–Ω—ã–π
		elif "–°–£–ü–ï–† –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–´–ï" in category_name:
			checkbox_pressed_style.bg_color = Color(0.1, 0.5, 0.1, 1.0)  # –Ø—Ä–∫–æ-–∑–µ–ª–µ–Ω—ã–π
		elif "–ù–ï–ì–ê–¢–ò–í–ù–´–ï" in category_name:
			checkbox_pressed_style.bg_color = Color(0.4, 0.1, 0.1, 1.0)  # –ö—Ä–∞—Å–Ω—ã–π
		else:  # –°–£–ü–ï–† –û–¢–†–ò–¶–ê–¢–ï–õ–¨–ù–´–ï
			checkbox_pressed_style.bg_color = Color(0.5, 0.1, 0.1, 1.0)  # –Ø—Ä–∫–æ-–∫—Ä–∞—Å–Ω—ã–π
		
		status_button.add_theme_stylebox_override("pressed", checkbox_pressed_style)
		
		# –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
		status_button.add_theme_color_override("font_color", Color(0.9, 0.9, 0.9, 1.0))
		status_button.add_theme_color_override("font_pressed_color", Color(1.0, 1.0, 1.0, 1.0))
		status_button.add_theme_color_override("font_hover_color", Color(1.0, 1.0, 1.0, 1.0))
		
		parent_container.add_child(status_button)
		status_buttons[status_id] = status_button
	
	# –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
	var spacer = Control.new()
	spacer.custom_minimum_size = Vector2(0, 10)
	parent_container.add_child(spacer)

# ‚Üê –§–£–ù–ö–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ö–ò –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø –°–¢–ê–¢–£–°–û–í
func _on_status_button_toggled(toggled_on: bool, status_id: String):
	if toggled_on:
		print("–î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å: ", status_id)
		player_stats.add_status(status_id)
	else:
		print("–£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å: ", status_id)
		player_stats.remove_status(status_id)
	update_display()

# ‚Üê –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –¢–ò–ü–ê –£–°–¢–†–û–ô–°–¢–í–ê
func _detect_device_type():
	screen_size = get_viewport().get_visible_rect().size
	print("–†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞: ", screen_size)
	
	# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—é —Å—Ç–æ—Ä–æ–Ω –∏ —Ä–∞–∑–º–µ—Ä—É
	var aspect_ratio = screen_size.x / screen_size.y
	is_mobile = screen_size.x < 790
	
	if is_mobile:
		print("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
		base_font_size = 14  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
	else:
		print("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥–µ—Å–∫—Ç–æ–ø/–ø–ª–∞–Ω—à–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
		base_font_size = 12

# ‚Üê –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ù–ê–°–¢–†–û–ô–ö–ê –†–ê–ó–ú–ï–†–û–í –ü–ê–ù–ï–õ–ò
func _setup_panel_size():
	if is_mobile:
		# –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö - –ø–æ—á—Ç–∏ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
		dev_panel.size = Vector2(screen_size.x * 0.95, screen_size.y * 0.9)
		dev_panel.position = Vector2(
			(screen_size.x - dev_panel.size.x) / 2,
			(screen_size.y - dev_panel.size.y) / 2
		)
	else:
		# –ù–∞ –¥–µ—Å–∫—Ç–æ–ø/–ø–ª–∞–Ω—à–µ—Ç–µ - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
		dev_panel.size = Vector2(800, 600)
		dev_panel.position = Vector2(
			(screen_size.x - 800) / 2,
			(screen_size.y - 600) / 2
		)

# ‚Üê –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ù–ê–°–¢–†–û–ô–ö–ê –ê–î–ê–ü–¢–ò–í–ù–û–ì–û –ò–ù–¢–ï–†–§–ï–ô–°–ê
func _setup_responsive_ui():
	# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º ScrollContainer
	scroll_container.custom_minimum_size = dev_panel.size - Vector2(40, 40)
	scroll_container.size = scroll_container.custom_minimum_size
	
	# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π VBox
	if is_mobile:
		main_vbox.custom_minimum_size = Vector2(scroll_container.size.x - 20, scroll_container.size.y * 1.5)
	else:
		main_vbox.custom_minimum_size = Vector2(scroll_container.size.x - 20, 800)
	
	# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
	var separation = 15 if is_mobile else 10
	main_vbox.add_theme_constant_override("separation", separation)
	
	# ‚Üê –ù–ê–°–¢–†–û–ô–ö–ê –°–ï–¢–ö–ò –°–¢–ê–¢–£–°–û–í
	if is_mobile:
		# –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö - 1 –∫–æ–ª–æ–Ω–∫–∞ (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª)
		status_grid.columns = 1
		status_grid.custom_minimum_size = Vector2(scroll_container.size.x - 40, 500)
	else:
		# –ù–∞ –¥–µ—Å–∫—Ç–æ–ø–µ - 2 –∫–æ–ª–æ–Ω–∫–∏ (–ª–µ–≤–∞—è-–ø—Ä–∞–≤–∞—è)
		status_grid.columns = 2
		status_grid.custom_minimum_size = Vector2(scroll_container.size.x - 40, 400)
	
	status_grid.add_theme_constant_override("v_separation", 8)
	status_grid.add_theme_constant_override("h_separation", 20)  # –ë–æ–ª—å—à–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –∫–æ–ª–æ–Ω–∫–∞–º–∏
	
	# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
	var left_column = status_grid.get_node_or_null("LeftColumn")
	var right_column = status_grid.get_node_or_null("RightColumn")
	
	if left_column and right_column:
		left_column.add_theme_constant_override("separation", 6)
		right_column.add_theme_constant_override("separation", 6)
	
	# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ–∫—Ü–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤
	status_section.add_theme_constant_override("separation", 8)
		
	# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
	if stats_container is GridContainer:
		if is_mobile:
			stats_container.columns = 1
			stats_container.add_theme_constant_override("v_separation", 10)
			stats_container.add_theme_constant_override("h_separation", 5)
		else:
			stats_container.columns = 2
			stats_container.add_theme_constant_override("v_separation", 8)
			stats_container.add_theme_constant_override("h_separation", 15)
	
	# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–µ–π—Å—Ç–≤–∏–π
	if actions_container is HBoxContainer:
		if is_mobile:
			actions_container.add_theme_constant_override("separation", 5)
		else:
			actions_container.add_theme_constant_override("separation", 10)
		actions_container.alignment = BoxContainer.ALIGNMENT_CENTER
	
	# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º SpinBoxes
	var spin_size = Vector2(80, 30) if is_mobile else Vector2(70, 25)
	strength_spin.custom_minimum_size = spin_size
	fortitude_spin.custom_minimum_size = spin_size
	agility_spin.custom_minimum_size = spin_size
	endurance_spin.custom_minimum_size = spin_size
	luck_spin.custom_minimum_size = spin_size
	
	# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
	var button_width = 120 if is_mobile else 110
	var button_height = 35 if is_mobile else 30
	apply_stats_button.custom_minimum_size = Vector2(button_width, button_height)
	heal_button.custom_minimum_size = Vector2(button_width, button_height)
	level_up_button.custom_minimum_size = Vector2(button_width, button_height)
	add_exp_button.custom_minimum_size = Vector2(button_width, button_height)
	close_button.custom_minimum_size = Vector2(button_width, 40 if is_mobile else 35)
	
	# –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
	if is_mobile:
		apply_stats_button.add_theme_font_size_override("font_size", base_font_size)
		heal_button.add_theme_font_size_override("font_size", base_font_size)
		level_up_button.add_theme_font_size_override("font_size", base_font_size)
		add_exp_button.add_theme_font_size_override("font_size", base_font_size)
		close_button.add_theme_font_size_override("font_size", base_font_size)

# ‚Üê –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–ë–†–ê–ë–û–¢–ö–ê –ò–ó–ú–ï–ù–ï–ù–ò–Ø –†–ê–ó–ú–ï–†–ê –≠–ö–†–ê–ù–ê
func _on_viewport_size_changed():
	print("–†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è: ", get_viewport().get_visible_rect().size)
	_detect_device_type()
	_setup_panel_size()
	_setup_responsive_ui()
	
	# –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –ø–∞–Ω–µ–ª—å –æ—Ç–∫—Ä—ã—Ç–∞
	if dev_panel.visible:
		update_display()

func _set_children_process_mode(node: Node, mode: int):
	for child in node.get_children():
		if child is Control:
			child.process_mode = mode
		_set_children_process_mode(child, mode)

func _connect_signals():
	_disconnect_signals()
	
	apply_stats_button.pressed.connect(_on_apply_stats_button_pressed)
	heal_button.pressed.connect(_on_heal_button_pressed)
	level_up_button.pressed.connect(_on_level_up_button_pressed)
	add_exp_button.pressed.connect(_on_add_exp_button_pressed)
	close_button.pressed.connect(_on_close_button_pressed)

func _disconnect_signals():
	if apply_stats_button.pressed.is_connected(_on_apply_stats_button_pressed):
		apply_stats_button.pressed.disconnect(_on_apply_stats_button_pressed)
	if heal_button.pressed.is_connected(_on_heal_button_pressed):
		heal_button.pressed.disconnect(_on_heal_button_pressed)
	if level_up_button.pressed.is_connected(_on_level_up_button_pressed):
		level_up_button.pressed.disconnect(_on_level_up_button_pressed)
	if add_exp_button.pressed.is_connected(_on_add_exp_button_pressed):
		add_exp_button.pressed.disconnect(_on_add_exp_button_pressed)
	if close_button.pressed.is_connected(_on_close_button_pressed):
		close_button.pressed.disconnect(_on_close_button_pressed)

func _input(event):
	if event is InputEventKey and event.pressed:
		var key = OS.get_keycode_string(event.keycode)
		current_input.append(key)
		
		if current_input.size() > secret_code.size():
			current_input.remove_at(0)
		
		if current_input == secret_code:
			toggle_dev_panel()
			current_input.clear()

func toggle_dev_panel():
	if not player_stats:
		player_stats = get_tree().get_first_node_in_group("player_stats")
		if not player_stats:
			push_error("PlayerStats not found!")
			return
	
	dev_panel.visible = not dev_panel.visible
	
	if dev_panel.visible and not level_up_menu_open:
		get_tree().paused = true
		_disable_menu_button(true)
	
	if not dev_panel.visible and not level_up_menu_open:
		get_tree().paused = false
		_disable_menu_button(false)
		
	if dev_panel.visible:
		update_display()
		dev_panel.grab_focus()

func on_level_up_menu_opened():
	level_up_menu_open = true

func on_level_up_menu_closed():
	level_up_menu_open = false
	
	if dev_panel.visible:
		get_tree().paused = true
	else:
		get_tree().paused = false

func update_display():
	if not player_stats:
		return
	
	strength_spin.value = player_stats.stats_system.strength
	fortitude_spin.value = player_stats.stats_system.fortitude
	agility_spin.value = player_stats.stats_system.agility
	endurance_spin.value = player_stats.stats_system.endurance
	luck_spin.value = player_stats.stats_system.luck
	
	# –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å—Ç–∞—Ç—É—Å–æ–≤
	for status_id in status_buttons:
		var status_button = status_buttons[status_id]
		var is_active = false
		
		for active_status in player_stats.active_statuses:
			if active_status.id == status_id:
				is_active = true
				break
		
		status_button.set_pressed_no_signal(is_active)

func _on_apply_stats_button_pressed():
	print("–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–∞–∂–∞—Ç–∞")
	if player_stats:
		player_stats.stats_system.strength = int(strength_spin.value)
		player_stats.stats_system.fortitude = int(fortitude_spin.value)
		player_stats.stats_system.agility = int(agility_spin.value)
		player_stats.stats_system.endurance = int(endurance_spin.value)
		player_stats.stats_system.luck = int(luck_spin.value)
		player_stats.stats_changed.emit()
		
		_force_achievement_check()

# ‚Üê –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞—á–∏–≤–æ–∫
func _force_achievement_check():
	var achievement_manager = get_tree().get_first_node_in_group("achievement_manager")
	if not achievement_manager:
		print("‚ùå AchievementManager –Ω–µ –Ω–∞–π–¥–µ–Ω!")
		return
	
	if achievement_manager.has_method("check_stats_achievements"):
		print("üéØ –í–´–ó–´–í–ê–ï–ú –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–£–Æ –ü–†–û–í–ï–†–ö–£ –ê–ß–ò–í–û–ö")
		achievement_manager.check_stats_achievements(player_stats)
		
		# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –≤—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
		print("üìä –¢–µ–∫—É—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—á–∏–≤–æ–∫:")
		print("   –°–∏–ª–∞:", player_stats.stats_system.strength)
		print("   –ö—Ä–µ–ø–æ—Å—Ç—å:", player_stats.stats_system.fortitude)
		print("   –õ–æ–≤–∫–æ—Å—Ç—å:", player_stats.stats_system.agility)
		print("   –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å:", player_stats.stats_system.endurance)
		print("   –£–¥–∞—á–∞:", player_stats.stats_system.luck)
	else:
		print("‚ùå –ú–µ—Ç–æ–¥ check_stats_achievements –Ω–µ –Ω–∞–π–¥–µ–Ω")

func _on_heal_button_pressed():
	print("–õ–µ—á–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–æ")
	if player_stats:
		player_stats.current_health = player_stats.get_max_health()
		player_stats.health_changed.emit(player_stats.current_health)

func _on_level_up_button_pressed():
	print("–£—Ä–æ–≤–µ–Ω—å UP –Ω–∞–∂–∞—Ç–æ")
	if player_stats:
		player_stats._level_up()

func _on_add_exp_button_pressed():
	print("+1000 –æ–ø—ã—Ç–∞ –Ω–∞–∂–∞—Ç–æ")
	if player_stats:
		player_stats.add_exp(1000)

func _on_close_button_pressed():
	print("–ó–∞–∫—Ä—ã—Ç—å –Ω–∞–∂–∞—Ç–æ")
	toggle_dev_panel()

func _disable_menu_button(disabled: bool):
	var menu_button = get_tree().get_first_node_in_group("menu_button")
	if menu_button:
		menu_button.disabled = disabled
		# –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
		if disabled:
			menu_button.modulate = Color(1, 1, 1, 0.5)
		else:
			menu_button.modulate = Color(1, 1, 1, 1)
