#PlayerHUD.gd
extends CanvasLayer

@onready var health_bar: ProgressBar = $HealthBar
@onready var health_label: Label = $HealthLabel
@onready var level_label: Label = $LevelLabel
@onready var exp_bar: ProgressBar = $ExpBar

# –û–°–¢–ê–í–õ–Ø–ï–ú —Ç–æ–ª—å–∫–æ labels —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
@onready var strength_label: Label = $StatsContainer/StrengthLabel
@onready var fortitude_label: Label = $StatsContainer/FortitudeLabel  
@onready var endurance_label: Label = $StatsContainer/EnduranceLabel
@onready var luck_label: Label = $StatsContainer/LuckLabel
@onready var regen_label: Label = $StatsContainer/RegenLabel
@onready var kills_label: Label = $KillBox/KillsLabel  # ‚Üê –ù–û–í–´–ô –õ–ï–ô–ë–õ
@onready var status_container: HBoxContainer = $StatusContainer  # ‚Üê –ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä

var player_stats_instance: PlayerStats

func _ready():
	add_to_group("hud")
	# –ù–∞—Ö–æ–¥–∏–º —ç–∫–∑–µ–º–ø–ª—è—Ä PlayerStats
	player_stats_instance = get_tree().get_first_node_in_group("player_stats")
	if not player_stats_instance:
		push_error("PlayerStats not found!")
		return
	
	# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–∏–≥–Ω–∞–ª–∞–º
	player_stats_instance.health_changed.connect(update_health)
	player_stats_instance.level_up.connect(update_level)
	player_stats_instance.exp_gained.connect(_on_exp_gained)
	player_stats_instance.stats_changed.connect(update_stats_display)  # ‚Üê –ù–û–í–û–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï!
	player_stats_instance.monsters_killed_changed.connect(update_kills_display)  # ‚Üê –ù–û–í–´–ô –°–ò–ì–ù–ê–õ
	player_stats_instance.statuses_changed.connect(update_status_display)
	
	# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞—Ä—ã
	health_bar.max_value = player_stats_instance.get_max_health()
	exp_bar.max_value = player_stats_instance.exp_to_level
	
	# –ñ–¥–µ–º –æ–¥–∏–Ω –∫–∞–¥—Ä, —á—Ç–æ–±—ã –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
	await get_tree().process_frame
	
	update_display()
	update_kills_display(player_stats_instance.monsters_killed)  # ‚Üê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú –°–ß–ï–¢–ß–ò–ö


func update_health(health: int):
	# –û–ë–ù–û–í–õ–Ø–ï–ú –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
	health_bar.max_value = player_stats_instance.get_max_health()
	health_bar.value = health
	health_label.text = "HP: %d/%d" % [health, player_stats_instance.get_max_health()]

func update_level(new_level: int, available_points: int):  # ‚Üê –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä
	level_label.text = "Level: %d" % new_level
	update_exp_display()
	update_stats_display()  # ‚Üê –û–±–Ω–æ–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ –æ—á–∫–∏!
	# available_points –º–æ–∂–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, —Ç.–∫. –±–µ—Ä–µ–º –∏–∑ player_stats_instance

func update_exp_display():
	# –û–ë–ù–û–í–õ–Ø–ï–ú –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø—ã—Ç–∞
	exp_bar.max_value = player_stats_instance.exp_to_level
	exp_bar.value = player_stats_instance.current_exp
	# –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø—ã—Ç–∞
	_create_exp_gain_effect()

func _create_exp_gain_effect():
	# –í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—ã—Ç–∞
	var tween = create_tween()
	tween.tween_property(exp_bar, "value", player_stats_instance.current_exp, 0.3)
#	tween.tween_callback(_check_level_up)

func update_stats_display():
	var effective_stats = player_stats_instance.get_effective_stats()
	# –û–±–Ω–æ–≤–ª—è–µ–º –¢–û–õ–¨–ö–û —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
	if strength_label:
		strength_label.text = "–°–∏–ª–∞: %d" % effective_stats["strength"]
	if fortitude_label:
		fortitude_label.text = "–ö—Ä–µ–ø–æ—Å—Ç—å: %d" % effective_stats["fortitude"]
	if endurance_label:
		endurance_label.text = "–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: %d" % effective_stats["endurance"]
	if luck_label:
		luck_label.text = "–£–¥–∞—á–∞: %d" % effective_stats["luck"]
	if regen_label:
		regen_label.text = "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: %.1f/s" % effective_stats["health_regen"]


func update_kills_display(kills: int):
	if kills_label:
		kills_label.text = "–£–±–∏—Ç–æ –º–æ–Ω—Å—Ç—Ä–æ–≤: %d" % kills

func update_status_display():
		
	# –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
	for child in status_container.get_children():
		if child.has_meta("status_tween"):
			var tween = child.get_meta("status_tween")
			if tween and tween.is_valid():
				tween.kill()
		child.queue_free()
	
	# –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
	for status in player_stats_instance.active_statuses:
		# –û–°–ù–û–í–ù–û–ô –ö–û–ù–¢–ï–ô–ù–ï–† –î–õ–Ø –°–¢–ê–¢–£–°–ê
		var status_container_item = Control.new()
		status_container_item.custom_minimum_size = Vector2(40, 40)
		status_container_item.mouse_filter = Control.MOUSE_FILTER_PASS
		
		# –§–û–ù
		var background = ColorRect.new()
		background.size = Vector2(36, 36)
		background.position = Vector2(2, 2)
		background.color = Color(0, 0, 0, 0.6)
		background.mouse_filter = Control.MOUSE_FILTER_IGNORE
		
		# –≠–ú–û–î–ó–ò –°–¢–ê–¢–£–°–ê
		var status_label = Label.new()
		status_label.name = "StatusEmoji"
		status_label.size = Vector2(32, 32)
		status_label.position = Vector2(4, 4)
		status_label.horizontal_alignment = HORIZONTAL_ALIGNMENT_CENTER
		status_label.vertical_alignment = VERTICAL_ALIGNMENT_CENTER
		status_label.text = _get_status_emoji(status.id)
		status_label.add_theme_font_size_override("font_size", 18)
		
		# –¶–í–ï–¢ –í –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –û–¢ –¢–ò–ü–ê –°–¢–ê–¢–£–°–ê
		var text_color = Color.SKY_BLUE if status.type == 0 else Color.INDIAN_RED
		status_label.add_theme_color_override("font_color", text_color)
		
		# –¢–ê–ô–ú–ï–† –í –ü–†–ê–í–û–ú –ù–ò–ñ–ù–ï–ú –£–ì–õ–£ (–û–ë–ù–û–í–õ–Ø–ï–ú–´–ô)
		var timer_label = Label.new()
		timer_label.name = "TimerLabel"  # ‚Üê –î–û–ë–ê–í–õ–Ø–ï–ú –ò–ú–Ø –î–õ–Ø –ü–û–ò–°–ö–ê
		timer_label.size = Vector2(20, 12)
		timer_label.position = Vector2(18, 26)
		timer_label.horizontal_alignment = HORIZONTAL_ALIGNMENT_CENTER
		timer_label.vertical_alignment = VERTICAL_ALIGNMENT_CENTER
		timer_label.add_theme_font_size_override("font_size", 10)
		timer_label.add_theme_color_override("font_color", Color.WHITE)
		
		# –§–û–ù –î–õ–Ø –¢–ê–ô–ú–ï–†–ê
		var timer_bg = ColorRect.new()
		timer_bg.size = Vector2(20, 12)
		timer_bg.position = Vector2(18, 26)
		timer_bg.color = Color(0, 0, 0, 0.8)
		timer_bg.mouse_filter = Control.MOUSE_FILTER_IGNORE
		
		# –ü–û–î–°–ö–ê–ó–ö–ò!
		var tooltip_text = "%s\n%s\n\n–û—Å—Ç–∞–ª–æ—Å—å: %s" % [
			status.name, 
			status.description, 
			_format_time_full(status.duration)
		]
		status_container_item.tooltip_text = tooltip_text
		
		# –°–û–ë–ò–†–ê–ï–ú –í–°–ï –í–ú–ï–°–¢–ï
		status_container_item.add_child(background)
		status_container_item.add_child(timer_bg)
		status_container_item.add_child(status_label)
		status_container_item.add_child(timer_label)
		
		# –ê–ù–ò–ú–ê–¶–ò–Ø –î–õ–Ø –í–ê–ñ–ù–´–• –°–¢–ê–¢–£–°–û–í
		if (status.id == "lucky_day" or status.id == "adrenaline") and not status_container_item.has_meta("animation_started"):
			_start_status_animation(status_container_item)
		
		status_container.add_child(status_container_item)

	# ‚Üê –ó–ê–ü–£–°–ö–ê–ï–ú –¢–ê–ô–ú–ï–† –û–ë–ù–û–í–õ–ï–ù–ò–Ø –í–†–ï–ú–ï–ù–ò
	_start_timer_updates()

func _start_status_animation(status_item: Control):
	# –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞
	status_item.set_meta("animation_started", true)
	
	var status_label = status_item.get_node("StatusEmoji")
	var tween = create_tween()
	
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–≤–∏–Ω –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
	status_item.set_meta("status_tween", tween)
	
	# –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ê–ù–ò–ú–ê–¶–ò–Ø —Å –∫–æ–Ω–µ—á–Ω—ã–º —á–∏—Å–ª–æ–º –ø–æ–≤—Ç–æ—Ä–æ–≤
	tween.tween_property(status_label, "scale", Vector2(1.3, 1.3), 0.6)
	tween.tween_property(status_label, "scale", Vector2(1.0, 1.0), 0.6)
	tween.set_loops(100)  # ‚Üê –û–ì–†–ê–ù–ò–ß–ò–í–ê–ï–ú –ö–û–õ–ò–ß–ï–°–¢–í–û –ü–û–í–¢–û–†–û–í!

func _start_timer_updates():
	# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
	if has_node("StatusTimer"):
		get_node("StatusTimer").queue_free()
	
	# –°–û–ó–î–ê–ï–ú –ù–û–í–´–ô –¢–ê–ô–ú–ï–†
	var timer = Timer.new()
	timer.name = "StatusTimer"
	timer.wait_time = 1.0
	timer.timeout.connect(_update_status_timers)
	add_child(timer)
	timer.start()


func _update_status_timers():
	# –ü–†–û–í–ï–†–Ø–ï–ú, –ß–¢–û –ö–û–ù–¢–ï–ô–ù–ï–† –°–£–©–ï–°–¢–í–£–ï–¢
	if not is_instance_valid(status_container):
		return
	
	# –û–ë–ù–û–í–õ–Ø–ï–ú –¢–ê–ô–ú–ï–†–´ –í–°–ï–• –ê–ö–¢–ò–í–ù–´–• –°–¢–ê–¢–£–°–û–í
	for i in range(status_container.get_child_count()):
		var status_item = status_container.get_child(i)
		
		# –ü–†–û–í–ï–†–ö–ê –í–ê–õ–ò–î–ù–û–°–¢–ò
		if not is_instance_valid(status_item):
			continue
		
		var timer_label = status_item.get_node_or_null("TimerLabel")
		if not timer_label:
			continue
		
		if i < player_stats_instance.active_statuses.size():
			var status = player_stats_instance.active_statuses[i]
			
			# –û–ë–ù–û–í–õ–Ø–ï–ú –¢–ê–ô–ú–ï–†
			timer_label.text = _format_time(status.duration)
			
			# –û–ë–ù–û–í–õ–Ø–ï–ú –ü–û–î–°–ö–ê–ó–ö–£
			var tooltip_text = "%s\n%s\n\n–û—Å—Ç–∞–ª–æ—Å—å: %s" % [
				status.name, 
				status.description, 
				_format_time_full(status.duration)
			]
			status_item.tooltip_text = tooltip_text

func _format_time(seconds: float) -> String:
	# –ö–û–†–û–¢–ö–ò–ô –§–û–†–ú–ê–¢ –î–õ–Ø –¢–ê–ô–ú–ï–†–ê: "1:30", "0:45"
	var mins = int(seconds) / 60
	var secs = int(seconds) % 60
	return "%d:%02d" % [mins, secs]

func _format_time_full(seconds: float) -> String:
	# –ü–û–õ–ù–´–ô –§–û–†–ú–ê–¢ –î–õ–Ø –ü–û–î–°–ö–ê–ó–ö–ò: "1 –º–∏–Ω—É—Ç–∞ 30 —Å–µ–∫—É–Ω–¥"
	var mins = int(seconds) / 60
	var secs = int(seconds) % 60
	
	if mins > 0 and secs > 0:
		return "%d –º–∏–Ω %d —Å–µ–∫" % [mins, secs]
	elif mins > 0:
		return "%d –º–∏–Ω—É—Ç" % mins
	else:
		return "%d —Å–µ–∫—É–Ω–¥" % secs

func _get_status_emoji(status_id: String) -> String:
	var emoji_dict = {
		"well_fed": "üçñ", "good_shoes": "üëü", "inspired": "üí°",
		"adrenaline": "‚ö°", "lucky_day": "üçÄ", "sore_knees": "ü¶µ",
		"crying": "üò¢", "exhausted": "üò¥", "bad_luck": "‚òÇÔ∏è", "minor_injury": "ü©π"
	}
	return emoji_dict.get(status_id, "‚ùì")


func update_display():
	update_health(player_stats_instance.current_health)
	update_level(player_stats_instance.level, player_stats_instance.available_points)  # player_stats_instance.available_points ‚Üê –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç!
	update_exp_display()
	update_stats_display()

# –î–û–ë–ê–í–õ–Ø–ï–ú –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—ã—Ç–∞
func _on_exp_gained():
	# –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—ã—Ç–∞
	_create_exp_gain_effect()
