#PlayerStat.gd
extends Node
class_name PlayerStats

signal health_changed(new_health)
signal level_up(new_level, available_points)  # ‚Üê –î–æ–±–∞–≤–ª—è–µ–º available_points
signal player_died
signal exp_gained()
signal stats_changed()  # ‚Üê –ù–û–í–´–ô –°–ò–ì–ù–ê–õ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫!
signal monsters_killed_changed(count: int)  # ‚Üê –ù–û–í–´–ô –°–ò–ì–ù–ê–õ
signal statuses_changed()  # ‚Üê –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª

@export var stats_system: StatsSystem = StatsSystem.new()

# –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å–∏—Å—Ç–µ–º—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
#var stats_system: StatsSystem = StatsSystem.new()
var current_health: int
var current_exp: int = 0
var exp_to_level: int = 100
var level: int = 1
var available_points: int = 0  # ‚Üê –û—á–∫–∏ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
var monsters_killed: int = 0  # ‚Üê –ù–û–í–ê–Ø –ü–ï–†–ï–ú–ï–ù–ù–ê–Ø
var active_statuses: Array[StatusEffect] = []
var max_concurrent_statuses: int = 3
var accumulated_regen: float = 0.0
var is_invisible: bool = false
var status_library: Dictionary = {}

# –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
func get_max_health() -> int: return stats_system.get_max_health()
func get_damage() -> int: return stats_system.get_damage() 
func get_defense() -> int: return stats_system.get_defense()
func get_health_regen() -> float: return stats_system.get_health_regen()
func get_level() -> int: return level


func _ready():
	add_to_group("player_stats")
	process_mode = Node.PROCESS_MODE_ALWAYS  
	# –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã
	_init_status_library()
	
	# –ù–∞—á–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
	stats_system.strength = 1
	stats_system.fortitude = 0
	stats_system.endurance = 0
	stats_system.luck = 0
	stats_system.base_health = 5  # ‚Üì –ë–∞–∑–æ–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ
	
	
	current_health = get_max_health()
	
	# –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
	_create_status_timer()
	
	
	# –ù–∞—á–∏–Ω–∞–µ–º —Å 1 —É—Ä–æ–≤–Ω—è –∏ –¥–∞–µ–º –æ—á–∫–∏ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
	level = 1
	available_points = 3  # ‚Üê –û—á–∫–∏ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
		
	# –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
	await get_tree().process_frame
	level_up.emit(level, available_points)  # ‚Üê –°–∏–≥–Ω–∞–ª –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
	calculate_current_level()
	
func calculate_current_level() -> int:
	# –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
	var calculated_level = level
	return calculated_level

func _init_status_library():
	var now_level = calculate_current_level()  # ‚Üê –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
	print("üéØ –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤: ", calculate_current_level())
	# –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–´–ï –°–¢–ê–¢–£–°–´ (–≥–æ–ª—É–±–æ–π/–∑–æ–ª–æ—Ç–æ–π)
	status_library["well_fed"] = StatusEffect.new(
		"well_fed", "–•–æ—Ä–æ—à–æ –ø–æ–∫—É—à–∞–ª", "–ë–æ–Ω—É—Å –∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º",  
		StatusEffect.StatusType.POSITIVE, randf_range(300, 720)  # 5-10 –º–∏–Ω—É—Ç
	)
	status_library["well_fed"].strength_modifier = max(1, level - 5)
	status_library["well_fed"].fortitude_modifier = max(1, now_level - 5)
	status_library["well_fed"].endurance_modifier = max(1, now_level - 5)
	status_library["well_fed"].luck_modifier = max(1, now_level - 5)
	
	status_library["good_shoes"] = StatusEffect.new(
		"good_shoes", "–£–¥–æ–±–Ω–∞—è –æ–±—É–≤—å", "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è", 
		StatusEffect.StatusType.POSITIVE, randf_range(300, 600)
	)
	status_library["good_shoes"].speed_modifier = 1.25
	
	status_library["inspired"] = StatusEffect.new(
		"inspired", "–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ", "–í—ã –≤ —É–¥–∞—Ä–µ, –±–æ–Ω—É—Å —É–¥–∞—á–∏ –∏ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", 
		StatusEffect.StatusType.POSITIVE, randf_range(240, 720)  # 4-8 –º–∏–Ω—É—Ç
	)
	status_library["inspired"].luck_modifier = max(2, now_level - 8)
	status_library["inspired"].health_regen_modifier = 0.5
	
	status_library["adrenaline"] = StatusEffect.new(
		"adrenaline", "–í—ã–±—Ä–æ—Å –∞–¥—Ä–µ–Ω–∞–ª–∏–Ω–∞", "—É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏, —Å–∏–ª—ã, —É–º–µ–Ω—å—à–µ–Ω–∏–µ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏",
		StatusEffect.StatusType.POSITIVE, randf_range(180, 540)  # 3-5 –º–∏–Ω—É—Ç
	)
	status_library["adrenaline"].speed_modifier = 1.25
	status_library["adrenaline"].strength_modifier = max(3, now_level - 5)
	status_library["adrenaline"].fortitude_modifier = min(-3, 10 - now_level)
	
	status_library["lucky_day"] = StatusEffect.new(
		"lucky_day", "–°—á–∞—Å—Ç–ª–∏–≤—ã–π –¥–µ–Ω—å", "–£–¥–≤–æ–µ–Ω–Ω—ã–π —à–∞–Ω—Å –∫—Ä–∏—Ç–∞", 
		StatusEffect.StatusType.POSITIVE, randf_range(300, 900)  # 10-15 –º–∏–Ω—É—Ç
	)
	status_library["lucky_day"].luck_modifier = max(10, now_level - 5)
	
	status_library["potion_splash"] = StatusEffect.new(
		"potion_splash", "–û–±–ª–∏–ª—Å—è –∑–µ–ª—å–µ–º", "–£ –≤–∞—Å —Ä–æ—Å—Ç—É—Ç –Ω–æ–≤—ã–µ –∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏",  
		StatusEffect.StatusType.POSITIVE, randf_range(90, 240)  # 10-15 —Å–µ–∫—É–Ω–¥
	)
	status_library["potion_splash"].health_regen_modifier = 5.0
	
	# 2. "–°—ä–µ–ª –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–π –≥—Ä–∏–±" - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
	status_library["strange_mushroom"] = StatusEffect.new(
		"strange_mushroom", "–°—ä–µ–ª –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–π –≥—Ä–∏–±", "–°—É–ø–µ—Ä—Å–∫–æ—Ä–æ—Å—Ç—å", 
		StatusEffect.StatusType.POSITIVE, randf_range(60, 300)  # 20-30 —Å–µ–∫—É–Ω–¥
	)
	status_library["strange_mushroom"].speed_modifier = 2.0  # √ó2 —Å–∫–æ—Ä–æ—Å—Ç–∏
	
	# 3. "–ù–∞–¥–µ–ª –ø–ª–∞—â-–ø–∞–ª–∞—Ç–∫—É" - –Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç—å (—Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
	status_library["cloak_tent"] = StatusEffect.new(
		"cloak_tent", "–ù–∞–¥–µ–ª –ø–ª–∞—â-–ø–∞–ª–∞—Ç–∫—É", "–ù–µ–≤–∏–¥–∏–º–æ—Å—Ç—å", 
		StatusEffect.StatusType.POSITIVE, randf_range(30, 90)  # 30-90 —Å–µ–∫—É–Ω–¥
	)
	# –ù–µ–≤–∏–¥–∏–º–æ—Å—Ç—å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –≤ –∫–æ–¥–µ –∏–≥—Ä–æ–∫–∞
	
	# 4. "–í—ã–ø–∏–ª –Ω–∞–ø–∏—Ç–æ–∫ –º–∞–≥–∞" - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —É—Ä–æ–Ω–∞
	status_library["mage_potion"] = StatusEffect.new(
		"mage_potion", "–í—ã–ø–∏–ª –Ω–∞–ø–∏—Ç–æ–∫ –±–µ—Ä—Å–µ—Ä–∫–∞", "–ë–æ–ª—å—à–µ —Å–∏–ª—ã, –º–µ–Ω—å—à–µ –∫—Ä–µ–ø–æ—Å—Ç–∏", 
		StatusEffect.StatusType.POSITIVE, randf_range(90, 600)  # 20-25 —Å–µ–∫—É–Ω–¥
	)
	status_library["mage_potion"].strength_modifier = max(5, now_level)  # +5 –∫ —Å–∏–ª–µ
	status_library["mage_potion"].fortitude_modifier = min(-5, -now_level) 
	
	# 5. "–ù–∞—à–µ–ª –ø–µ—Ä–æ —Ñ–µ–Ω–∏–∫—Å–∞" - –∑–∞—â–∏—Ç–∞
	status_library["phoenix_feather"] = StatusEffect.new(
		"phoenix_feather", "–ù–∞—à–µ–ª –ø–µ—Ä–æ —Ñ–µ–Ω–∏–∫—Å–∞", "–ü–æ–≤—ã—à–µ–Ω–∏–µ –∑–∞—â–∏—Ç—ã", 
		StatusEffect.StatusType.POSITIVE, randf_range(90, 720)  # 35-40 —Å–µ–∫—É–Ω–¥
	)
	status_library["phoenix_feather"].fortitude_modifier = max(10, now_level + 2)  # +10 –∫ –∑–∞—â–∏—Ç–µ
	
	# –û—Å–æ–±—ã–π —Å—Ç–∞—Ç—É—Å - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
	
	# 6. "–ú—ã—Å–ª–∏—Ç–µ–ª—å" - –æ–ø—ã—Ç
	status_library["thinker"] = StatusEffect.new(
		"thinker", "–ó–≤–µ–∑–¥–æ–π –ø–æ –≥–æ–ª–æ–≤–µ", "–û–ø—ã—Ç –≤–ª–∏–≤–∞–µ—Ç—Å—è —Ä—É—á—å–µ–º –∏ –≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å", 
		StatusEffect.StatusType.POSITIVE, randf_range(10, 30)  # 10-30 —Å–µ–∫—É–Ω–¥
	)
	status_library["thinker"].fortitude_modifier = min(-1, 9 - now_level)
		# –û—Å–æ–±—ã–π —Å—Ç–∞—Ç—É—Å - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
	
	# –ù–ï–ì–ê–¢–ò–í–ù–´–ï –°–¢–ê–¢–£–°–´ (–∫—Ä–∞—Å–Ω—ã–π)
	status_library["sore_knees"] = StatusEffect.new(
		"sore_knees", "–ë–æ–ª—å –≤ –∫–æ–ª–µ–Ω—è—Ö", "–í—ã —Ö—Ä–æ–º–∞–µ—Ç–µ", 
		StatusEffect.StatusType.NEGATIVE, randf_range(180, 600)
	)
	status_library["sore_knees"].speed_modifier = 0.85
	
	status_library["crying"] = StatusEffect.new(
		"crying", "–ü–ª–∞–∫–∞–ª", "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —É—Ç–µ–∫–∞—é—Ç —Å–æ —Å–ª–µ–∑–∞–º–∏", 
		StatusEffect.StatusType.NEGATIVE, randf_range(180, 360)  # 3-6 –º–∏–Ω—É—Ç
	)
	status_library["crying"].strength_modifier = min(-1, 10 - now_level)
	status_library["crying"].fortitude_modifier = min(-1, 10 - now_level)
	status_library["crying"].endurance_modifier = min(-1, 10 - now_level)
	status_library["crying"].luck_modifier = min(-1, 10 - now_level)
	
	status_library["exhausted"] = StatusEffect.new(
		"exhausted", "–ò—Å—Ç–æ—â–µ–Ω–∏–µ", "–ú–µ–Ω—å—à–µ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏", 
		StatusEffect.StatusType.NEGATIVE, randf_range(180, 540)  # 7-12 –º–∏–Ω—É—Ç
	)
	status_library["exhausted"].speed_modifier = 0.75
	status_library["exhausted"].health_regen_modifier = -0.5
	
	status_library["bad_luck"] = StatusEffect.new(
		"bad_luck", "–ù–µ—É–¥–∞—á–Ω—ã–π –¥–µ–Ω—å", "–ü—Ä–æ—â–∞–π —É–¥–∞—á–∞", 
		StatusEffect.StatusType.NEGATIVE, randf_range(120, 660)  # 2-7 –º–∏–Ω—É—Ç
	)
	status_library["bad_luck"].luck_modifier = min(-5, 5 - now_level)
	
	status_library["minor_injury"] = StatusEffect.new(
		"minor_injury", "–õ–µ–≥–∫–æ–µ —Ä–∞–Ω–µ–Ω–∏–µ", "–ê –≥–¥–µ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å –∏ –∫—Ä–µ–ø–æ—Å—Ç—å?", 
		StatusEffect.StatusType.NEGATIVE, randf_range(240, 480)  # 4-8 –º–∏–Ω—É—Ç
	)
	status_library["minor_injury"].endurance_modifier = min(-1, 9 - now_level)
	status_library["minor_injury"].fortitude_modifier = min(-1, 9 - now_level)

	# 6. "–£–≤—è–∑ –≤ –±–æ–ª–æ—Ç–µ" - –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ
	status_library["swamp_bog"] = StatusEffect.new(
		"swamp_bog", "–£–≤—è–∑ –≤ –±–æ–ª–æ—Ç–µ", "–ó–∞–º–µ–¥–ª–µ–Ω–∏–µ", 
		StatusEffect.StatusType.NEGATIVE, randf_range(30, 240)  # 12-15 —Å–µ–∫—É–Ω–¥
	)
	status_library["swamp_bog"].speed_modifier = 0.4  # √ó0.4 —Å–∫–æ—Ä–æ—Å—Ç–∏
	
	# 7. "–£–∫—É—Å —è–¥–æ–≤–∏—Ç–æ–π –∑–º–µ–∏" - –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω
	status_library["snake_bite"] = StatusEffect.new(
		"snake_bite", "–£–∫—É—Å –æ–ø—ã—Ç–Ω–æ–π –∑–º–µ–∏", "–ü–æ—Ç–µ—Ä—è –æ–ø—ã—Ç–∞, –∞ –≥–¥–µ —Ä–µ–≥–µ–Ω?", 
		StatusEffect.StatusType.NEGATIVE, randf_range(10, 30)  # 10-12 —Å–µ–∫—É–Ω–¥
	)
	status_library["snake_bite"].health_regen_modifier = -2
	# –£—Ä–æ–Ω –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
	
	# 8. "–û—à–µ–ª–æ–º–ª–µ–Ω —É–¥–∞—Ä–æ–º" - –æ–≥–ª—É—à–µ–Ω–∏–µ
	status_library["stunned"] = StatusEffect.new(
		"stunned", "–û—à–µ–ª–æ–º–ª–µ–Ω —É–¥–∞—Ä–æ–º", "–ù–µ –º–æ–∂–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è", 
		StatusEffect.StatusType.NEGATIVE, randf_range(10, 60)  # 3-5 —Å–µ–∫—É–Ω–¥
	)
	status_library["stunned"].speed_modifier = -10.0
	# –û–≥–ª—É—à–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ

func _create_status_timer():
	var timer = Timer.new()
	timer.wait_time = 1.0
	timer.timeout.connect(_update_statuses)
	timer.process_mode = Node.PROCESS_MODE_ALWAYS  # ‚Üê –¢–ê–ô–ú–ï–† –¢–û–ñ–ï –í–°–ï–ì–î–ê
	add_child(timer)
	timer.start()

func _update_statuses():
	
	# –ü–†–û–í–ï–†–Ø–ï–ú –ì–õ–û–ë–ê–õ–¨–ù–£–Æ –ü–ê–£–ó–£ (–º–µ–Ω—é, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫)
	if get_tree().paused:
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ø–∞—É–∑–∞ –≤ –±–æ—é –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞?
		var battle_system = get_tree().get_first_node_in_group("battle_system")
		if not battle_system or not battle_system.visible:
			return  # –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ü–ê–£–ó–ê - –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
	
	var statuses_to_remove = []
	var was_invisible = is_invisible
	is_invisible = false
	
	for status in active_statuses:
		status.duration -= 1.0
		
		# –û–ë–†–ê–ë–û–¢–ö–ê –°–ü–ï–¶–ò–ê–õ–¨–ù–´–• –≠–§–§–ï–ö–¢–û–í
		match status.id:
			"snake_bite":
				# –£–º–µ–Ω—å—à–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –≤–º–µ—Å—Ç–æ —É—Ä–æ–Ω–∞
				if current_exp > 0:
					current_exp = max(0, current_exp - 1)  # -1 exp –≤ —Å–µ–∫—É–Ω–¥—É
					exp_gained.emit()  # –û–±–Ω–æ–≤–ª—è–µ–º UI –æ–ø—ã—Ç–∞
			"cloak_tent":
				is_invisible = true
			"thinker":
				if current_exp >= 0:
					current_exp = current_exp + 2  # +2 exp –≤ —Å–µ–∫—É–Ω–¥—É
					exp_gained.emit()  # –û–±–Ω–æ–≤–ª—è–µ–º UI –æ–ø—ã—Ç–∞
			
		if status.duration <= 0:
			statuses_to_remove.append(status)
			
	if was_invisible != is_invisible:
		statuses_changed.emit()  # –û–±–Ω–æ–≤–∏–º UI
	
	for status in statuses_to_remove:
		active_statuses.erase(status)
	
	if statuses_to_remove.size() > 0:
		statuses_changed.emit()
		stats_changed.emit()

func is_player_invisible() -> bool:
	for status in active_statuses:
		if status.id == "cloak_tent":
			return true
	return false

func add_status(status_id: String):
	# –ü–†–û–í–ï–†–ö–ê –ù–ê –î–£–ë–õ–ò–ö–ê–¢–´
	for existing_status in active_statuses:
		if existing_status.id == status_id:
			return
			
	# ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–†–û–í–ï–†–Ø–ï–ú –ï–°–¢–¨ –õ–ò –°–í–û–ë–û–î–ù–´–ï –°–õ–û–¢–´
	if active_statuses.size() >= max_concurrent_statuses:
		print("–í—Å–µ —Å–ª–æ—Ç—ã —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–Ω—è—Ç—ã. –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å: ", status_id)
		return  # ‚Üê –í–´–•–û–î–ò–ú, –ù–ï –î–û–ë–ê–í–õ–Ø–ï–ú –ù–û–í–´–ô –°–¢–ê–¢–£–°
	
	if status_library.has(status_id):
		var template = status_library[status_id]
				
		var new_status = StatusEffect.new(
			template.id, 
			template.name, 
			template.description,
			template.type, 
			template.duration  # —Å–ª—É—á–∞–π–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
		)
		
		# –ö–û–ü–ò–†–£–ï–ú –ú–û–î–ò–§–ò–ö–ê–¢–û–†–´ –∏–∑ —à–∞–±–ª–æ–Ω–∞
		new_status.speed_modifier = template.speed_modifier
		new_status.strength_modifier = template.strength_modifier
		new_status.fortitude_modifier = template.fortitude_modifier
		new_status.endurance_modifier = template.endurance_modifier
		new_status.luck_modifier = template.luck_modifier
		new_status.health_regen_modifier = template.health_regen_modifier
		
		
		active_statuses.append(new_status)
		statuses_changed.emit()
		stats_changed.emit()


func remove_status(status_id: String):
	for i in range(active_statuses.size() - 1, -1, -1):
		if active_statuses[i].id == status_id:
			active_statuses.remove_at(i)
			statuses_changed.emit()
			stats_changed.emit()
			break

func get_effective_stats() -> Dictionary:
	# –ë–ê–ó–û–í–´–ï –∑–Ω–∞—á–µ–Ω–∏—è (–∫–æ–ø–∏—Ä—É–µ–º)
	var base_stats = {
		"speed": 1.0,
		"strength": stats_system.strength,
		"fortitude": stats_system.fortitude, 
		"endurance": stats_system.endurance,
		"luck": stats_system.luck,
		#"health_regen": stats_system.get_health_regen()
	}
	
	# –ù–ê–ö–ê–ü–õ–ò–í–ê–ï–ú –±–æ–Ω—É—Å—ã –û–¢–î–ï–õ–¨–ù–û
	var total_speed_bonus = 0.0
	var total_strength_bonus = 0
	var total_fortitude_bonus = 0
	var total_endurance_bonus = 0
	var total_luck_bonus = 0
	var total_health_regen_bonus = 0.0
	
	for i in range(active_statuses.size()):
		var status = active_statuses[i]
		
		total_speed_bonus += (status.speed_modifier - 1.0)
		total_strength_bonus += status.strength_modifier
		total_fortitude_bonus += status.fortitude_modifier
		total_endurance_bonus += status.endurance_modifier
		total_luck_bonus += status.luck_modifier
		total_health_regen_bonus += status.health_regen_modifier
		
	# –ü–†–ò–ú–ï–ù–Ø–ï–ú –±–æ–Ω—É—Å—ã –û–î–ò–ù –†–ê–ó
	var result = {
		"speed": max(0.0, base_stats.speed + total_speed_bonus),
		"strength": max(0, base_stats.strength + total_strength_bonus),
		"fortitude": max(0, base_stats.fortitude + total_fortitude_bonus),
		"endurance": max(0, base_stats.endurance + total_endurance_bonus),
		"luck": max(0, base_stats.luck + total_luck_bonus),
		"health_regen": max(0.0, (base_stats.endurance + total_endurance_bonus) * 0.5 + total_health_regen_bonus)
	}
		
	return result

func _get_active_statuses_data() -> Array:
	var statuses_data = []
	for status in active_statuses:
		statuses_data.append({
			"id": status.id,
			"duration": status.duration
		})
	return statuses_data

func get_crit_chance_with_modifiers() -> float:
	var base_chance = stats_system.get_crit_chance()
	for status in active_statuses:
		if status.id == "lucky_day":
			base_chance *= 2.0
	return base_chance


# –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö
func apply_post_battle_effects():
	if randf() < 0.3:  # 30% —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –±–æ—è
		var negative_statuses = ["sore_knees", "minor_injury", "exhausted", "swamp_bog", "snake_bite", "stunned"]
		add_status(negative_statuses[randi() % negative_statuses.size()])
	
	if randf() < 0.4:  # 40% —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å
		var positive_statuses = ["thinker", "well_fed", "adrenaline", "inspired", "potion_splash", "strange_mushroom", "mage_potion", "phoenix_feather"] 
		add_status(positive_statuses[randi() % positive_statuses.size()])


func apply_movement_effects():
	if randf() < 0.2:  # 10% —à–∞–Ω—Å –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏
		if randf() < 0.6:  # 60% –∏–∑ –Ω–∏—Ö - –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ
			var positive_statuses = ["thinker", "good_shoes", "adrenaline", "cloak_tent"]
			add_status(positive_statuses[randi() % positive_statuses.size()])
		else:
			var negative_statuses = ["sore_knees", "swamp_bog"]
			add_status(negative_statuses[randi() % negative_statuses.size()])

func apply_level_up_effects():
	# –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –≤—Å–µ–≥–¥–∞ –¥–∞–µ–º –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å
	var positive_statuses = ["well_fed", "inspired", "lucky_day"]
	add_status(positive_statuses[randi() % positive_statuses.size()])


func take_damage(amount: int):
	var actual_damage = max(1, amount)
	current_health -= actual_damage
	health_changed.emit(current_health)
	
	if current_health <= 0:
		current_health = 0
		player_died.emit()  # ‚Üê –°–∏–≥–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è

func heal(amount: int):
	current_health = min(current_health + amount, get_max_health())
	health_changed.emit(current_health)

# –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–¥–æ—Ä–æ–≤—å—è –≤–Ω–µ –±–æ—è
func regenerate_health(delta: float):
	if current_health < get_max_health():
		# –ò–°–ü–û–õ–¨–ó–£–ï–ú –≠–§–§–ï–ö–¢–ò–í–ù–£–Æ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–æ–≤
		var effective_stats = get_effective_stats()
		var regen_per_second = effective_stats["health_regen"]
		accumulated_regen += regen_per_second * delta
		
		# –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω–∞–∫–æ–ø–∏–ª—Å—è —Ü–µ–ª—ã–π HP
		if accumulated_regen >= 1.0:
			var hp_to_add = floor(accumulated_regen)
			current_health = clamp(current_health + hp_to_add, 0, get_max_health())
			accumulated_regen -= hp_to_add
			
			var display_health = int(current_health)
			health_changed.emit(display_health)

func add_exp(amount: int):
	# ‚Üê –ü–†–û–°–¢–û –î–û–ë–ê–í–õ–Ø–ï–ú –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ô –û–ü–´–¢
	current_exp += amount
	exp_gained.emit()

func add_monster_kill():  # ‚Üê –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø
	monsters_killed += 1
	monsters_killed_changed.emit(monsters_killed)
	# ‚Üê –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–ò–ñ–ï–ù–ò–ô
	var achievement_manager = get_tree().get_first_node_in_group("achievement_manager")
	if achievement_manager:
		achievement_manager.check_kill_achievements(monsters_killed)

func complete_level_up_after_battle():  # ‚Üê –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø
	if current_exp >= exp_to_level:
		_level_up()


func _level_up():
	level += 1
	# ‚Üê –û–ë–ù–û–í–õ–Ø–ï–ú –ü–û–†–ì –û–ü–´–¢–ê –î–õ–Ø –°–õ–ï–î–£–Æ–©–ï–ì–û –£–†–û–í–ù–Ø
	exp_to_level = get_exp_for_next_level(level)
	current_exp = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–ø—ã—Ç
	# –î–∞–µ–º 3 –æ—á–∫–∞ –∑–∞ —É—Ä–æ–≤–µ–Ω—å
	available_points += 3
	# –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
	current_health = get_max_health()
	level_up.emit(level, available_points)
	# ‚Üê –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–ò–ñ–ï–ù–ò–ô –£–†–û–í–ù–Ø
	apply_level_up_effects()
	var achievement_manager = get_tree().get_first_node_in_group("achievement_manager")
	if achievement_manager:
		achievement_manager.check_level_achievements(level)


func increase_strength():
	if available_points > 0:
		stats_system.strength += 1
		available_points -= 1
		stats_changed.emit()
		# ‚Üê –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–ò–ñ–ï–ù–ò–ô –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö
		var achievement_manager = get_tree().get_first_node_in_group("achievement_manager")
		if achievement_manager:
			achievement_manager.check_stats_achievements(stats_system)

func increase_fortitude():
	if available_points > 0:
		stats_system.fortitude += 1  
		available_points -= 1
		stats_changed.emit()
		# ‚Üê –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–ò–ñ–ï–ù–ò–ô –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö
		var achievement_manager = get_tree().get_first_node_in_group("achievement_manager")
		if achievement_manager:
			achievement_manager.check_stats_achievements(stats_system)

func increase_endurance():
	if available_points > 0:
		stats_system.endurance += 1
		available_points -= 1
		stats_changed.emit()
		# ‚Üê –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–ò–ñ–ï–ù–ò–ô –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö
		var achievement_manager = get_tree().get_first_node_in_group("achievement_manager")
		if achievement_manager:
			achievement_manager.check_stats_achievements(stats_system)

func increase_luck():
	if available_points > 0:
		stats_system.luck += 1
		available_points -= 1
		stats_changed.emit()
		# ‚Üê –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–ò–ñ–ï–ù–ò–ô –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö
		var achievement_manager = get_tree().get_first_node_in_group("achievement_manager")
		if achievement_manager:
			achievement_manager.check_stats_achievements(stats_system)


func get_exp_for_next_level(current_level: int) -> int:
	# ‚Üê –§–ò–ö–°–ò–†–û–í–ê–ù–ù–û–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –ü–û–ë–ï–î –î–õ–Ø –ö–ê–ñ–î–û–ì–û –£–†–û–í–ù–Ø
	if current_level <= 15:
		# –£—Ä–æ–≤–Ω–∏ 1-15: –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è –∫–∞–∫ —Ä–∞–Ω—å—à–µ
		match current_level:
			1: return 100    # 5 –ø–æ–±–µ–¥
			2: return 150    # 7-8 –ø–æ–±–µ–¥
			3: return 200    # 10 –ø–æ–±–µ–¥
			4: return 250    # 12-13 –ø–æ–±–µ–¥
			5: return 300    # 15 –ø–æ–±–µ–¥—ã
			6: return 350    # 17-18 –ø–æ–±–µ–¥
			7: return 400    # 20 –ø–æ–±–µ–¥
			8: return 450   # 22-23 –ø–æ–±–µ–¥
			9: return 500   # 25 –ø–æ–±–µ–¥
			10: return 1000  # 50 –ø–æ–±–µ–¥
			11: return 1200  # 60 –ø–æ–±–µ–¥
			12: return 1400  # 70 –ø–æ–±–µ–¥
			13: return 1600  # 80 –ø–æ–±–µ–¥
			14: return 1800  # 90 –ø–æ–±–µ–¥
			15: return 2000  # 100 –ø–æ–±–µ–¥
	elif current_level <= 39:
		# ‚Üê –£–†–û–í–ù–ò 16-39: –ø–ª–∞–≤–Ω—ã–π —Ä–æ—Å—Ç –¥–æ 250 –ø–æ–±–µ–¥
		# ‚Üê –£–†–û–í–ù–ò 16-39: —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–æ 5000
		if current_level == 39:
			return 5000  # ‚Üê exactly 5000 for 39‚Üí40
		else:
			var victories_needed = 100 + (current_level - 15) * 6
			return victories_needed * 20
	else:
	# ‚Üê –£–†–û–í–ù–ò 40+: –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ï 300 –ü–û–ë–ï–î
	# –î–ª—è 40+ —É—Ä–æ–≤–Ω—è: 300 –ø–æ–±–µ–¥ √ó 20 exp = 6000 exp
		return 6000
	return 6000


func get_exp_reward_multiplier(player_level: int) -> float:
	# ‚Üê –§–ò–ö–°–ò–†–û–í–ê–ù–ù–ê–Ø –ù–ê–ì–†–ê–î–ê: –í–°–ï–ì–î–ê 20 exp –∑–∞ –ø–æ–±–µ–¥—É
	# –ú–Ω–æ–∂–∏—Ç–µ–ª—å –≤—Å–µ–≥–¥–∞ 1.0, —Ç–∞–∫ –∫–∞–∫ –º–æ–Ω—Å—Ç—Ä—ã –¥–∞—é—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–ø—ã—Ç
	return 1.0

func load_from_data(data: Dictionary):
	level = data.get("level", 1)
	current_exp = data.get("current_exp", 0)
	exp_to_level = data.get("exp_to_level", 100)
	current_health = data.get("current_health", 100)
	available_points = data.get("available_points", 0)
	stats_system.strength = data.get("strength", 1)
	stats_system.fortitude = data.get("fortitude", 1) 
	stats_system.endurance = data.get("endurance", 1)
	stats_system.luck = data.get("luck", 1)
	monsters_killed = data.get("monsters_killed", 0)  # ‚Üê –ó–ê–ì–†–£–ó–ö–ê –°–ß–ï–¢–ß–ò–ö–ê
	# –ù–ï –≤—ã–∑—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª level_up –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ!
	_load_active_statuses(data.get("active_statuses", []))
	
	health_changed.emit(current_health)  # ‚Üê –¢–æ–ª—å–∫–æ –∑–¥–æ—Ä–æ–≤—å–µ –æ–±–Ω–æ–≤–ª—è–µ–º
	monsters_killed_changed.emit(monsters_killed)  # ‚Üê –û–ë–ù–û–í–õ–Ø–ï–ú –ò–ù–¢–ï–†–§–ï–ô–°
	stats_changed.emit()  # ‚Üê –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫


func _load_active_statuses(statuses_data: Array):
	# –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã
	active_statuses.clear()
	
	for status_data in statuses_data:
		var status_id = status_data["id"]
		var duration = status_data["duration"]
		
		if status_library.has(status_id):
			var template = status_library[status_id]
			var new_status = StatusEffect.new(
				template.id, 
				template.name, 
				template.description,
				template.type, 
				duration  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
			)
			
			# –ö–æ–ø–∏—Ä—É–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
			new_status.speed_modifier = template.speed_modifier
			new_status.strength_modifier = template.strength_modifier
			new_status.fortitude_modifier = template.fortitude_modifier
			new_status.endurance_modifier = template.endurance_modifier
			new_status.luck_modifier = template.luck_modifier
			new_status.health_regen_modifier = template.health_regen_modifier
			
			active_statuses.append(new_status)
	
	# –û–±–Ω–æ–≤–ª—è–µ–º UI
	statuses_changed.emit()
	stats_changed.emit()
