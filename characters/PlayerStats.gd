#PlayerStat.gd
extends Node
class_name PlayerStats

signal health_changed(new_health)
signal level_up(new_level, available_points)  # ‚Üê –î–æ–±–∞–≤–ª—è–µ–º available_points
signal player_died
signal exp_gained()
signal stats_changed()  # ‚Üê –ù–û–í–´–ô –°–ò–ì–ù–ê–õ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫!


# –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å–∏—Å—Ç–µ–º—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
var stats_system: StatsSystem = StatsSystem.new()
var current_health: int
var current_exp: int = 0
var exp_to_level: int = 100
var level: int = 1
var available_points: int = 0  # ‚Üê –û—á–∫–∏ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è

var accumulated_regen: float = 0.0

# –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
func get_max_health() -> int: return stats_system.get_max_health()
func get_damage() -> int: return stats_system.get_damage() 
func get_defense() -> int: return stats_system.get_defense()
func get_health_regen() -> float: return stats_system.get_health_regen()
func get_level() -> int: return level


func _ready():
	add_to_group("player_stats")
	
	# –ù–∞—á–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
	stats_system.strength = 1
	stats_system.fortitude = 0
	stats_system.endurance = 0
	stats_system.luck = 0
	stats_system.base_health = 5  # ‚Üì –ë–∞–∑–æ–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ
	
	current_health = get_max_health()
	
	# –ù–∞—á–∏–Ω–∞–µ–º —Å 1 —É—Ä–æ–≤–Ω—è –∏ –¥–∞–µ–º –æ—á–∫–∏ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
	level = 1
	available_points = 3  # ‚Üê –û—á–∫–∏ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
	
	# –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
	await get_tree().process_frame
	level_up.emit(level, available_points)  # ‚Üê –°–∏–≥–Ω–∞–ª –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

func take_damage(amount: int):
	var actual_damage = max(1, amount)
	current_health -= actual_damage
	health_changed.emit(current_health)
	
	if current_health <= 0:
		current_health = 0
		player_died.emit()  # ‚Üê –°–∏–≥–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è

func heal(amount: int):
	current_health = min(current_health + amount, get_max_health())
	health_changed.emit(current_health)

# –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–¥–æ—Ä–æ–≤—å—è –≤–Ω–µ –±–æ—è
func regenerate_health(delta: float):
	if current_health < get_max_health():
		var regen_per_second = get_health_regen()
		accumulated_regen += regen_per_second * delta
		
		# –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω–∞–∫–æ–ø–∏–ª—Å—è —Ü–µ–ª—ã–π HP
		if accumulated_regen >= 1.0:
			var hp_to_add = floor(accumulated_regen)
			current_health = min(current_health + hp_to_add, get_max_health())
			accumulated_regen -= hp_to_add
			
			var display_health = int(current_health)
			health_changed.emit(display_health)
			print("–†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è +", hp_to_add, " HP: ", display_health, "/", get_max_health())

func add_exp(amount: int):
	# ‚Üê –ü–†–û–°–¢–û –î–û–ë–ê–í–õ–Ø–ï–ú –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ô –û–ü–´–¢
	current_exp += amount
	exp_gained.emit()
	
	print("–ü–æ–ª—É—á–µ–Ω–æ –æ–ø—ã—Ç–∞: ", amount, " (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ)")
	

func complete_level_up_after_battle():  # ‚Üê –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø
	if current_exp >= exp_to_level:
		_level_up()

func _level_up():
	level += 1
	
	# ‚Üê –û–ë–ù–û–í–õ–Ø–ï–ú –ü–û–†–ì –û–ü–´–¢–ê –î–õ–Ø –°–õ–ï–î–£–Æ–©–ï–ì–û –£–†–û–í–ù–Ø
	exp_to_level = get_exp_for_next_level(level)
	current_exp = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–ø—ã—Ç
	
	# –î–∞–µ–º 3 –æ—á–∫–∞ –∑–∞ —É—Ä–æ–≤–µ–Ω—å
	available_points += 3
	
	# –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
	current_health = get_max_health()
	
	level_up.emit(level, available_points)
	print("üéâ –£—Ä–æ–≤–µ–Ω—å ", level, "! –ù—É–∂–Ω–æ –æ–ø—ã—Ç–∞ –¥–ª—è —Å–ª–µ–¥. —É—Ä–æ–≤–Ω—è: ", exp_to_level)
	
	
func increase_strength():
	if available_points > 0:
		stats_system.strength += 1
		available_points -= 1
		stats_changed.emit()

func increase_fortitude():
	if available_points > 0:
		stats_system.fortitude += 1  
		available_points -= 1
		stats_changed.emit()

func increase_endurance():
	if available_points > 0:
		stats_system.endurance += 1
		available_points -= 1
		stats_changed.emit()

func increase_luck():
	if available_points > 0:
		stats_system.luck += 1
		available_points -= 1
		stats_changed.emit()

func get_exp_for_next_level(current_level: int) -> int:
	# ‚Üê –§–ò–ö–°–ò–†–û–í–ê–ù–ù–û–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –ü–û–ë–ï–î –î–õ–Ø –ö–ê–ñ–î–û–ì–û –£–†–û–í–ù–Ø
	if current_level <= 15:
		# –£—Ä–æ–≤–Ω–∏ 1-15: –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è –∫–∞–∫ —Ä–∞–Ω—å—à–µ
		match current_level:
			1: return 100    # 5 –ø–æ–±–µ–¥
			2: return 150    # 7-8 –ø–æ–±–µ–¥
			3: return 200    # 10 –ø–æ–±–µ–¥
			4: return 250    # 12-13 –ø–æ–±–µ–¥
			5: return 300    # 15 –ø–æ–±–µ–¥—ã
			6: return 350    # 17-18 –ø–æ–±–µ–¥
			7: return 400    # 20 –ø–æ–±–µ–¥
			8: return 450   # 22-23 –ø–æ–±–µ–¥
			9: return 500   # 25 –ø–æ–±–µ–¥
			10: return 1000  # 50 –ø–æ–±–µ–¥
			11: return 1200  # 60 –ø–æ–±–µ–¥
			12: return 1400  # 70 –ø–æ–±–µ–¥
			13: return 1600  # 80 –ø–æ–±–µ–¥
			14: return 1800  # 90 –ø–æ–±–µ–¥
			15: return 2000  # 100 –ø–æ–±–µ–¥
	elif current_level <= 39:
		# ‚Üê –£–†–û–í–ù–ò 16-39: –ø–ª–∞–≤–Ω—ã–π —Ä–æ—Å—Ç –¥–æ 250 –ø–æ–±–µ–¥
		# ‚Üê –£–†–û–í–ù–ò 16-39: —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–æ 5000
		if current_level == 39:
			return 5000  # ‚Üê exactly 5000 for 39‚Üí40
		else:
			var victories_needed = 100 + (current_level - 15) * 6
			return victories_needed * 20
	else:
	# ‚Üê –£–†–û–í–ù–ò 40+: –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ï 300 –ü–û–ë–ï–î
	# –î–ª—è 40+ —É—Ä–æ–≤–Ω—è: 300 –ø–æ–±–µ–¥ √ó 20 exp = 6000 exp
		return 6000
	return 6000


func get_exp_reward_multiplier(player_level: int) -> float:
	# ‚Üê –§–ò–ö–°–ò–†–û–í–ê–ù–ù–ê–Ø –ù–ê–ì–†–ê–î–ê: –í–°–ï–ì–î–ê 20 exp –∑–∞ –ø–æ–±–µ–¥—É
	# –ú–Ω–æ–∂–∏—Ç–µ–ª—å –≤—Å–µ–≥–¥–∞ 1.0, —Ç–∞–∫ –∫–∞–∫ –º–æ–Ω—Å—Ç—Ä—ã –¥–∞—é—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–ø—ã—Ç
	return 1.0
