#PlayerStat.gd
extends Node
class_name PlayerStats

signal health_changed(new_health)
signal level_up(new_level, available_points)  # ‚Üê –î–æ–±–∞–≤–ª—è–µ–º available_points
signal player_died
signal exp_gained()
signal stats_changed()  # ‚Üê –ù–û–í–´–ô –°–ò–ì–ù–ê–õ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫!
signal monsters_killed_changed(count: int)  # ‚Üê –ù–û–í–´–ô –°–ò–ì–ù–ê–õ
signal statuses_changed()  # ‚Üê –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
signal bad_luck_changed(active: bool)

@export var stats_system: StatsSystem = StatsSystem.new()

# –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å–∏—Å—Ç–µ–º—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
#var stats_system: StatsSystem = StatsSystem.new()
var current_health: int
var current_exp: int = 0
var exp_to_level: int = 100
var level: int = 1
var available_points: int = 0  # ‚Üê –û—á–∫–∏ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
var monsters_killed: int = 0  # ‚Üê –ù–û–í–ê–Ø –ü–ï–†–ï–ú–ï–ù–ù–ê–Ø
var active_statuses: Array[StatusEffect] = []
var max_concurrent_statuses: int = 3
var accumulated_regen: float = 0.0
var is_invisible: bool = false
var status_library: Dictionary = {}


func get_crit_chance_against(defender_endurance: int) -> float:
	var effective_stats = get_effective_stats()
	return stats_system.get_crit_chance(effective_stats["luck"], defender_endurance)

func get_crit_defense_chance_against(attacker_luck: int) -> float:
	var effective_stats = get_effective_stats()
	return stats_system.get_crit_defense_chance(attacker_luck, effective_stats["endurance"])

func get_dodge_chance_against(attacker_luck: int) -> float:
	var effective_stats = get_effective_stats()
	return stats_system.get_dodge_chance(effective_stats["agility"], attacker_luck)

func get_hit_chance_against(defender_agility: int) -> float:
	var effective_stats = get_effective_stats()
	var base_chance = stats_system.get_hit_chance(effective_stats["luck"], defender_agility)
	
	# –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å –±–∞–ª–∞–Ω—Å–∞
	var balanced_bonus = get_balanced_hit_chance_bonus()
	var final_chance = base_chance + balanced_bonus
	
	return clamp(final_chance, 0.01, 0.99)
	
# –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
func get_max_health() -> int:
	# –ò—Å–ø–æ–ª—å–∑—É–µ–º –≠–§–§–ï–ö–¢–ò–í–ù–£–Æ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å (—Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–æ–≤)
	var effective_stats = get_effective_stats()
	return stats_system.base_health + (effective_stats["endurance"] * 5)
func get_damage() -> int: return stats_system.get_damage() 
func get_defense() -> int: return stats_system.get_defense()
func get_health_regen() -> float: return stats_system.get_health_regen()
func get_level() -> int: return level
func get_effective_defense() -> int:
	var effective_stats = get_effective_stats()
	var base_def = stats_system.base_defense + effective_stats["fortitude"]
	var min_defense = max(1, base_def)
	var max_defense = base_def + 3
	
	# –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å –±–∞–ª–∞–Ω—Å–∞
	var balanced_bonus = get_balanced_defense_bonus()
	return randi_range(min_defense + balanced_bonus, max_defense + balanced_bonus)

func get_effective_damage() -> int:
	var effective_stats = get_effective_stats()
	var base_dmg = stats_system.base_damage + effective_stats["strength"]
	var min_damage = max(1, base_dmg)
	var max_damage = base_dmg + 3
	
	# –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å –±–∞–ª–∞–Ω—Å–∞
	var balanced_bonus = get_balanced_damage_bonus()
	return randi_range(min_damage + balanced_bonus, max_damage + balanced_bonus)


func _ready():
	add_to_group("player_stats")
	process_mode = Node.PROCESS_MODE_ALWAYS  
	
	# 1. –°–Ω–∞—á–∞–ª–∞ –±–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
	stats_system.strength = 1
	stats_system.fortitude = 0
	stats_system.agility = 0
	stats_system.endurance = 0
	stats_system.luck = 0
	stats_system.base_health = 5  # ‚Üì –ë–∞–∑–æ–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ
	
	level = 1
	available_points = 3  # ‚Üê –û—á–∫–∏ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
	current_health = get_max_health()
	
	# 2. –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
	await get_tree().process_frame
	
	# 3. –¢–ï–ü–ï–†–¨ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã —Å –ü–†–ê–í–ò–õ–¨–ù–´–ú —É—Ä–æ–≤–Ω–µ–º
	if status_library.is_empty():
		_init_status_library()
	
	# 4. –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
	_create_status_timer()
		
	# 5. –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
	level_up.emit(level, available_points)  # ‚Üê –°–∏–≥–Ω–∞–ª –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
	

func _init_status_library():
	var now_level = level  # ‚Üê –ò—Å–ø–æ–ª—å–∑—É–µ–º –ü–†–Ø–ú–û –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é level
	#print("üéØ –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤: ", now_level)
	
	# –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–´–ï –°–¢–ê–¢–£–°–´ (–≥–æ–ª—É–±–æ–π/–∑–æ–ª–æ—Ç–æ–π)
	status_library["well_fed"] = StatusEffect.new(
		"well_fed", "–û–±—ä–µ–ª—Å—è –∫–∞–∫ —É–¥–∞–≤", "–ñ–∏–≤–æ—Ç —Ç—Ä–µ—â–∏—Ç, –Ω–æ –∑–∞—Ç–æ –∫–∞–∫ –≤—ã—Ä–æ—Å!",  
		StatusEffect.StatusType.POSITIVE, randf_range(240, 720)  # 5-10 –º–∏–Ω—É—Ç
	)
	status_library["well_fed"].strength_modifier = max(1, now_level/1.5)
	status_library["well_fed"].fortitude_modifier = max(1, now_level/1.5)
	status_library["well_fed"].agility_modifier = max(1, now_level/1.5)
	status_library["well_fed"].endurance_modifier = max(1, now_level/1.5)
	status_library["well_fed"].luck_modifier = max(1, now_level/1.5)
	
	status_library["good_shoes"] = StatusEffect.new(
		"good_shoes", "–ù–∞—à–µ–ª –∫—Ä–æ—Å—Å–æ–≤–∫–∏ Nuke", "–ß—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è –§–æ—Ä—Ä–µ—Å—Ç–æ–º –ì–∞–º–ø–æ–º!", 
		StatusEffect.StatusType.POSITIVE, randf_range(120, 600)
	)
	status_library["good_shoes"].speed_modifier = 1.25
	status_library["good_shoes"].agility_modifier = max(1, now_level/2.5)
	
	status_library["inspired"] = StatusEffect.new(
		"inspired", "–í–¥–æ—Ö–Ω–æ–≤–∏–ª—Å—è –∏–≥—Ä–æ–π", "–¢–µ–±–µ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –≤—Å—ë!", 
		StatusEffect.StatusType.POSITIVE, randf_range(240, 720)  # 4-8 –º–∏–Ω—É—Ç
	)
	status_library["inspired"].luck_modifier = max(2, now_level/1.3)
	status_library["inspired"].health_regen_modifier = 0.5
	
	status_library["adrenaline"] = StatusEffect.new(
		"adrenaline", "–í—ã–ø–∏–ª 7 —á–∞—à–µ–∫ –∫–æ—Ñ–µ", "–†—É–∫–∏ —Ç—Ä—è—Å—É—Ç—Å—è –∏ —Ö–æ—á–µ—Ç—Å—è –≤ —Ç—É–∞–ª–µ—Ç, –∑–∞—Ç–æ —É–¥–∞—Ä—ã –±—ã—Å—Ç—Ä—ã –∏ –±–æ–ª–µ–∑–Ω–µ–Ω—ã!",
		StatusEffect.StatusType.POSITIVE, randf_range(180, 540)  # 3-5 –º–∏–Ω—É—Ç
	)
	status_library["adrenaline"].speed_modifier = 1.25
	status_library["adrenaline"].strength_modifier = max(3, now_level - 5)
	status_library["adrenaline"].fortitude_modifier = min(-3, 10 - now_level)
	status_library["adrenaline"].health_regen_modifier = min(-0.5, 10 - now_level/2.0)
	
	status_library["lucky_day"] = StatusEffect.new(
		"lucky_day", "–°—á–∞—Å—Ç–ª–∏–≤—ã–π –¥–µ–Ω—å", "–î–∞–∂–µ –º–æ–Ω–µ—Ç—ã –ø–∞–¥–∞—é—Ç —Ä–µ–±—Ä–æ–º!", 
		StatusEffect.StatusType.POSITIVE, randf_range(300, 900)  # 10-15 –º–∏–Ω—É—Ç
	)
	status_library["lucky_day"].luck_modifier = max(10, now_level - 5)
	status_library["lucky_day"].agility_modifier = min(-10, -now_level/2.0)
	status_library["lucky_day"].health_regen_modifier = 10
	
	status_library["potion_splash"] = StatusEffect.new(
		"potion_splash", "–û–±–ª–∏–ª—Å—è –∑–µ–ª—å–µ–º", "–£ –≤–∞—Å —Ä–æ—Å—Ç—É—Ç –Ω–æ–≤—ã–µ –∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏",  
		StatusEffect.StatusType.POSITIVE, randf_range(90, 300)  # 10-15 —Å–µ–∫—É–Ω–¥
	)
	status_library["potion_splash"].health_regen_modifier = max(5, now_level - 4)
	
	# 2. "–°—ä–µ–ª –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–π –≥—Ä–∏–±" - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
	status_library["strange_mushroom"] = StatusEffect.new(
		"strange_mushroom", "–°—ä–µ–ª –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–π –≥—Ä–∏–±", "–ú–∏—Ä —Å—Ç–∞–ª —è—Ä—á–µ, –∞ –Ω–æ–≥–∏ –±—ã—Å—Ç—Ä–µ–µ!", 
		StatusEffect.StatusType.POSITIVE, randf_range(60, 300)  # 20-30 —Å–µ–∫—É–Ω–¥
	)
	status_library["strange_mushroom"].speed_modifier = 2.0  # √ó2 —Å–∫–æ—Ä–æ—Å—Ç–∏
	status_library["strange_mushroom"].agility_modifier = max(1, now_level/2.0)
	status_library["strange_mushroom"].luck_modifier = min(-1, -now_level/2.0) 
	
	# 3. "–ù–∞–¥–µ–ª –ø–ª–∞—â-–ø–∞–ª–∞—Ç–∫—É" - –Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç—å (—Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
	status_library["cloak_tent"] = StatusEffect.new(
		"cloak_tent", "–ù–∞–¥–µ–ª –ø–ª–∞—â-–ø–∞–ª–∞—Ç–∫—É", "–¢–µ–±—è –Ω–µ –≤–∏–¥–Ω–æ, –Ω–æ —Ç—ã –≤—Å–µ –µ—â–µ –∑–¥–µ—Å—å!", 
		StatusEffect.StatusType.POSITIVE, randf_range(30, 90)  # 30-90 —Å–µ–∫—É–Ω–¥
	)
	# –ù–µ–≤–∏–¥–∏–º–æ—Å—Ç—å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –≤ –∫–æ–¥–µ –∏–≥—Ä–æ–∫–∞
	
	# 4. "–í—ã–ø–∏–ª –Ω–∞–ø–∏—Ç–æ–∫ –º–∞–≥–∞" - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —É—Ä–æ–Ω–∞
	status_library["mage_potion"] = StatusEffect.new(
		"mage_potion", "–í—ã–ø–∏–ª –Ω–∞–ø–∏—Ç–æ–∫ –±–µ—Ä—Å–µ—Ä–∫–∞", "–°–∏–ª–∞ –≤–∞—Ä–≤–∞—Ä–∞, –Ω–æ —Ö—Ä—É–ø–∫–æ—Å—Ç—å –±–∞–ª–µ—Ä–∏–Ω—ã", 
		StatusEffect.StatusType.POSITIVE, randf_range(90, 600)  # 20-25 —Å–µ–∫—É–Ω–¥
	)
	status_library["mage_potion"].strength_modifier = max(5, now_level)  # +5 –∫ —Å–∏–ª–µ
	status_library["mage_potion"].fortitude_modifier = min(-5, -now_level) 
	
	# 5. "–ù–∞—à–µ–ª –ø–µ—Ä–æ —Ñ–µ–Ω–∏–∫—Å–∞" - –∑–∞—â–∏—Ç–∞
	status_library["phoenix_feather"] = StatusEffect.new(
		"phoenix_feather", "–ù–∞—à–µ–ª –ø–µ—Ä–æ –∂–∞—Ä-–¥—Ä–∞–∫–æ–Ω–∞", "–ö–æ–∂–∞ –∫–∞–∫ —Å ... –¥—Ä–∞–∫–æ–Ω–∞, –∞ –æ–≥–Ω—è –Ω–µ—Ç!", 
		StatusEffect.StatusType.POSITIVE, randf_range(90, 720)  # 35-40 —Å–µ–∫—É–Ω–¥
	)
	status_library["phoenix_feather"].fortitude_modifier = max(10, now_level + 2)  # +10 –∫ –∑–∞—â–∏—Ç–µ
	
	# –û—Å–æ–±—ã–π —Å—Ç–∞—Ç—É—Å - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
	
	# 6. "–ú—ã—Å–ª–∏—Ç–µ–ª—å" - –æ–ø—ã—Ç
	status_library["thinker"] = StatusEffect.new(
		"thinker", "–ó–≤–µ–∑–¥–æ–π –ø–æ –≥–æ–ª–æ–≤–µ", "–û–ø—ã—Ç —Ç–µ—á–µ—Ç —Ä–µ–∫–æ–π, –∞ –≥–æ–ª–æ–≤–∞ –±–æ–ª–∏—Ç –∫–∞–∫ –ø–æ—Å–ª–µ —ç–∫–∑–∞–º–µ–Ω–∞!", 
		StatusEffect.StatusType.POSITIVE, randf_range(10, 30)  # 10-30 —Å–µ–∫—É–Ω–¥
	)
	status_library["thinker"].endurance_modifier = min(-1, 5 - now_level/2.0)
		# –û—Å–æ–±—ã–π —Å—Ç–∞—Ç—É—Å - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
	
	# –ù–ï–ì–ê–¢–ò–í–ù–´–ï –°–¢–ê–¢–£–°–´ (–∫—Ä–∞—Å–Ω—ã–π)
	status_library["sore_knees"] = StatusEffect.new(
		"sore_knees", "–í—Å–ø–æ–º–Ω–∏–ª, —á—Ç–æ —Ç–µ–±–µ –Ω–µ 18", "–ö–æ–ª–µ–Ω–∏ —Ö—Ä—É—Å—Ç—è—Ç –∫–∞–∫ –æ—Å–µ–Ω–Ω—è—è –ª–∏—Å—Ç–≤–∞!", 
		StatusEffect.StatusType.NEGATIVE, randf_range(180, 600)
	)
	status_library["sore_knees"].speed_modifier = 0.85
	status_library["sore_knees"].agility_modifier = min(-1, 10 - now_level/3.0)
	
	status_library["crying"] = StatusEffect.new(
		"crying", "–ü–ª–∞–∫–∞–ª", "–°–ª–µ–∑—ã –º–µ—à–∞—é—Ç –≤–∏–¥–µ—Ç—å –≤—Ä–∞–≥–æ–≤... –∏ –≤–æ–æ–±—â–µ –≤—Å–µ!", 
		StatusEffect.StatusType.NEGATIVE, randf_range(180, 360)  # 3-6 –º–∏–Ω—É—Ç
	)
	status_library["crying"].strength_modifier = min(-1, 10 - now_level)
	status_library["crying"].fortitude_modifier = min(-1, 10 - now_level)
	status_library["crying"].agility_modifier = min(-1, 10 - now_level)
	status_library["crying"].endurance_modifier = min(-1, 10 - now_level)
	status_library["crying"].luck_modifier = min(-1, 10 - now_level)
	
	status_library["exhausted"] = StatusEffect.new(
		"exhausted", "–ë–µ–≥–∞–ª –æ—Ç –º–æ–Ω—Å—Ç—Ä–æ–≤ –¥–æ —É—Ç—Ä–∞", "–ì–ª–∞–∑–∞ —Å–ª–∏–ø–∞—é—Ç—Å—è, –∞ –Ω–æ–≥–∏ –≤–∞—Ç–Ω—ã–µ!", 
		StatusEffect.StatusType.NEGATIVE, randf_range(180, 540)  # 7-12 –º–∏–Ω—É—Ç
	)
	status_library["exhausted"].speed_modifier = 0.75
	status_library["exhausted"].agility_modifier = min(-1, 3 - now_level/3.0)
	status_library["exhausted"].health_regen_modifier = min(-0.5, 3 - now_level/3.0)
	
	status_library["bad_luck"] = StatusEffect.new(
		"bad_luck", "–ù–µ—É–¥–∞—á–Ω—ã–π –¥–µ–Ω—å", "–¢–µ–ø–µ—Ä—å –¥–∞–∂–µ —Å—Ç—É–ª –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–¥–Ω–æ–∂–∫—É!", 
		StatusEffect.StatusType.NEGATIVE, randf_range(120, 660)  # 2-7 –º–∏–Ω—É—Ç
	)
	status_library["bad_luck"].luck_modifier = min(-5, - now_level + 5)
	status_library["bad_luck"].agility_modifier = max(5, now_level - 5)
	status_library["bad_luck"].health_regen_modifier = 10
	
	status_library["minor_injury"] = StatusEffect.new(
		"minor_injury", "–ù–∞—Å—Ç—É–ø–∏–ª –Ω–∞ –¥–µ—Ç–∞–ª—å–∫—É LEGO", "–ë–æ–ª—å–Ω–æ, –Ω–æ –Ω–µ —Å–º–µ—Ä—Ç–µ–ª—å–Ω–æ...", 
		StatusEffect.StatusType.NEGATIVE, randf_range(120, 480)  # 4-8 –º–∏–Ω—É—Ç
	)
	status_library["minor_injury"].strength_modifier = max(3, now_level - 8)
	status_library["minor_injury"].endurance_modifier = min(-1, 5 - now_level/2.0)
	status_library["minor_injury"].fortitude_modifier = min(-1, 5 - now_level/2.0)
	status_library["minor_injury"].speed_modifier = 0.6  # √ó0.4 —Å–∫–æ—Ä–æ—Å—Ç–∏

	# 6. "–£–≤—è–∑ –≤ –±–æ–ª–æ—Ç–µ" - –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ
	status_library["swamp_bog"] = StatusEffect.new(
		"swamp_bog", "–£–≤—è–∑ –≤ –±–æ–ª–æ—Ç–µ", "–î–≤–∏–≥–∞–µ—à—å—Å—è –∫–∞–∫ –≤ –∫–ª–µ–π—Å—Ç–µ—Ä–µ!", 
		StatusEffect.StatusType.NEGATIVE, randf_range(30, 240)  # 12-15 —Å–µ–∫—É–Ω–¥
	)
	status_library["swamp_bog"].speed_modifier = 0.4  # √ó0.4 —Å–∫–æ—Ä–æ—Å—Ç–∏
	status_library["swamp_bog"].agility_modifier = min(-1, 5 - now_level/3.0)
	
	# 7. "–£–∫—É—Å —è–¥–æ–≤–∏—Ç–æ–π –∑–º–µ–∏" - –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω
	status_library["snake_bite"] = StatusEffect.new(
		"snake_bite", "–£–∫—É—Å –æ–ø—ã—Ç–Ω–æ–π –∑–º–µ–∏", "–û–ø—ã—Ç —É—Ç–µ–∫–∞–µ—Ç,–∞ –≤–º–µ—Å—Ç–µ —Å –Ω–∏–º –∏ —Ä–µ–≥–µ–Ω?", 
		StatusEffect.StatusType.NEGATIVE, randf_range(10, 30)  # 10-12 —Å–µ–∫—É–Ω–¥
	)
	status_library["snake_bite"].health_regen_modifier = -100
	# –£—Ä–æ–Ω –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
	
	# 8. "–û—à–µ–ª–æ–º–ª–µ–Ω —É–¥–∞—Ä–æ–º" - –æ–≥–ª—É—à–µ–Ω–∏–µ
	status_library["stunned"] = StatusEffect.new(
		"stunned", "–ü–æ–ª—É—á–∏–ª –ø–æ —à–∞–ø–∫–µ", "–í –≥–æ–ª–æ–≤–µ –∑–≤–µ–Ω–∏—Ç, –∞ –≤ –≥–ª–∞–∑–∞—Ö —Å–æ–ª–æ–≤—É—à–∫–∏!", 
		StatusEffect.StatusType.NEGATIVE, randf_range(10, 60)  # 3-5 —Å–µ–∫—É–Ω–¥
	)
	status_library["stunned"].speed_modifier = -10.0
	# –û–≥–ª—É—à–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ

	status_library["sleepy"] = StatusEffect.new(
	"sleepy", "–ù–µ –≤—ã—Å–ø–∞–ª—Å—è", "–ó–µ–≤–Ω—É–ª —Ç–∞–∫, —á—Ç–æ —á–µ–ª—é—Å—Ç—å —Ö—Ä—É—Å—Ç–Ω—É–ª–∞!", 
	StatusEffect.StatusType.NEGATIVE, randf_range(120, 360)
)
	status_library["sleepy"].strength_modifier = max(5, now_level + 5)
	status_library["sleepy"].fortitude_modifier = min(-5, 5 - now_level/2.0)
	status_library["sleepy"].agility_modifier = min(-1, 3 - now_level/3.0)
	status_library["sleepy"].endurance_modifier = min(-1, 5 - now_level/2.5)
	status_library["sleepy"].luck_modifier = max(5, now_level + 2)
	status_library["sleepy"].speed_modifier = 0.5
	
	
	
func _create_status_timer():
	var timer = Timer.new()
	timer.wait_time = 1.0
	timer.timeout.connect(_update_statuses)
	timer.process_mode = Node.PROCESS_MODE_ALWAYS  # ‚Üê –¢–ê–ô–ú–ï–† –¢–û–ñ–ï –í–°–ï–ì–î–ê
	add_child(timer)
	timer.start()

func _update_statuses():
	
	# –ü–†–û–í–ï–†–Ø–ï–ú –ì–õ–û–ë–ê–õ–¨–ù–£–Æ –ü–ê–£–ó–£ (–º–µ–Ω—é, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫)
	if get_tree().paused:
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ø–∞—É–∑–∞ –≤ –±–æ—é –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞?
		var battle_system = get_tree().get_first_node_in_group("battle_system")
		if not battle_system or not battle_system.visible:
			return  # –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ü–ê–£–ó–ê - –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
	
	var statuses_to_remove = []
	var was_invisible = is_invisible
	is_invisible = false
	
	for status in active_statuses:
		status.duration -= 1.0
		
		# –û–ë–†–ê–ë–û–¢–ö–ê –°–ü–ï–¶–ò–ê–õ–¨–ù–´–• –≠–§–§–ï–ö–¢–û–í
		match status.id:
			"snake_bite":
				# –£–º–µ–Ω—å—à–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –≤–º–µ—Å—Ç–æ —É—Ä–æ–Ω–∞
				if current_exp > 0:
					current_exp = max(0, current_exp - max(1, level))  # -1 exp –≤ —Å–µ–∫—É–Ω–¥—É
					exp_gained.emit()  # –û–±–Ω–æ–≤–ª—è–µ–º UI –æ–ø—ã—Ç–∞
			"cloak_tent":
				is_invisible = true
			"thinker":
				if current_exp >= 0:
					current_exp = current_exp + max(2, level + level/4.0)   # –æ—Ç 2 exp –≤ —Å–µ–∫—É–Ω–¥—É
					exp_gained.emit()  # –û–±–Ω–æ–≤–ª—è–µ–º UI –æ–ø—ã—Ç–∞
			
		if status.duration <= 0:
			statuses_to_remove.append(status)
			
	if was_invisible != is_invisible:
		statuses_changed.emit()  # –û–±–Ω–æ–≤–∏–º UI
	
	for status in statuses_to_remove:
		active_statuses.erase(status)
	
	if statuses_to_remove.size() > 0:
		statuses_changed.emit()
		stats_changed.emit()
		_update_max_health()

func is_player_invisible() -> bool:
	for status in active_statuses:
		if status.id == "cloak_tent":
			return true
	return false

func add_status(status_id: String):
	# –ü–†–û–í–ï–†–ö–ê –ù–ê –î–£–ë–õ–ò–ö–ê–¢–´
	for existing_status in active_statuses:
		if existing_status.id == status_id:
			return
			
	# ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–†–û–í–ï–†–Ø–ï–ú –ï–°–¢–¨ –õ–ò –°–í–û–ë–û–î–ù–´–ï –°–õ–û–¢–´
	if active_statuses.size() >= max_concurrent_statuses:
		print("–í—Å–µ —Å–ª–æ—Ç—ã —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–Ω—è—Ç—ã. –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å: ", status_id)
		return  # ‚Üê –í–´–•–û–î–ò–ú, –ù–ï –î–û–ë–ê–í–õ–Ø–ï–ú –ù–û–í–´–ô –°–¢–ê–¢–£–°
	
	if status_library.has(status_id):
		var template = status_library[status_id]
				
		var new_status = StatusEffect.new(
			template.id, 
			template.name, 
			template.description,
			template.type, 
			template.duration  # —Å–ª—É—á–∞–π–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
		)
		
		# –ö–û–ü–ò–†–£–ï–ú –ú–û–î–ò–§–ò–ö–ê–¢–û–†–´ –∏–∑ —à–∞–±–ª–æ–Ω–∞
		new_status.speed_modifier = template.speed_modifier
		new_status.strength_modifier = template.strength_modifier
		new_status.fortitude_modifier = template.fortitude_modifier
		new_status.agility_modifier = template.agility_modifier
		new_status.endurance_modifier = template.endurance_modifier
		new_status.luck_modifier = template.luck_modifier
		new_status.health_regen_modifier = template.health_regen_modifier
		
		
		active_statuses.append(new_status)
		statuses_changed.emit()
		stats_changed.emit()
		_update_max_health()
	
	# ‚Üê –í–´–ó–´–í–ê–ï–ú –°–ò–ì–ù–ê–õ –î–õ–Ø BAD_LUCK
		if status_id == "bad_luck":
			bad_luck_changed.emit(true)

func remove_status(status_id: String):
	for i in range(active_statuses.size() - 1, -1, -1):
		if active_statuses[i].id == status_id:
			active_statuses.remove_at(i)
			statuses_changed.emit()
			stats_changed.emit()
			_update_max_health()
			
			# ‚Üê –í–´–ó–´–í–ê–ï–ú –°–ò–ì–ù–ê–õ –î–õ–Ø BAD_LUCK
			if status_id == "bad_luck":
				bad_luck_changed.emit(false)
			break

func get_effective_stats() -> Dictionary:
	# –ë–ê–ó–û–í–´–ï –∑–Ω–∞—á–µ–Ω–∏—è (–∫–æ–ø–∏—Ä—É–µ–º)
	var base_stats = {
		"speed": 1.0,
		"strength": stats_system.strength,
		"fortitude": stats_system.fortitude, 
		"agility": stats_system.agility,
		"endurance": stats_system.endurance,
		"luck": stats_system.luck
		#"health_regen": stats_system.get_health_regen()
	}
	
	# –ù–ê–ö–ê–ü–õ–ò–í–ê–ï–ú –±–æ–Ω—É—Å—ã –û–¢–î–ï–õ–¨–ù–û
	var total_speed_bonus = 0.0
	var total_strength_bonus = 0
	var total_fortitude_bonus = 0
	var total_agility_bonus = 0
	var total_endurance_bonus = 0
	var total_luck_bonus = 0
	var total_health_regen_bonus = 0.0
	
	for i in range(active_statuses.size()):
		var status = active_statuses[i]
		
		total_speed_bonus += (status.speed_modifier - 1.0)
		total_strength_bonus += status.strength_modifier
		total_fortitude_bonus += status.fortitude_modifier
		total_agility_bonus += status.agility_modifier
		total_endurance_bonus += status.endurance_modifier
		total_luck_bonus += status.luck_modifier
		total_health_regen_bonus += status.health_regen_modifier
		
	# –ü–†–ò–ú–ï–ù–Ø–ï–ú –±–æ–Ω—É—Å—ã –û–î–ò–ù –†–ê–ó
	var result = {
		"speed": max(0.0, base_stats.speed + total_speed_bonus),
		"strength": max(0, base_stats.strength + total_strength_bonus),
		"fortitude": max(0, base_stats.fortitude + total_fortitude_bonus),
		"agility": max(0, base_stats.agility + total_agility_bonus),
		"endurance": max(0, base_stats.endurance + total_endurance_bonus),
		"luck": max(0, base_stats.luck + total_luck_bonus),
		"health_regen": max(0.0, (base_stats.endurance + total_endurance_bonus) * 0.5 + total_health_regen_bonus)
	}
		
	return result

func _get_active_statuses_data() -> Array:
	var statuses_data = []
	for status in active_statuses:
		statuses_data.append({
			"id": status.id,
			"duration": status.duration
		})
	return statuses_data

func get_crit_chance_with_modifiers(defender_endurance: int) -> float:
	# –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π —à–∞–Ω—Å –∫—Ä–∏—Ç–∞ –ø–æ –Ω–æ–≤–æ–π –º–µ—Ö–∞–Ω–∏–∫–µ
	var effective_stats = get_effective_stats()
	var base_chance = stats_system.get_crit_chance(effective_stats["luck"], defender_endurance)
	
	# –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Å—Ç–∞—Ç—É—Å–æ–≤
	for status in active_statuses:
		if status.id == "lucky_day":
			base_chance *= 10.0  # –£–¥–≤–∞–∏–≤–∞–µ–º —à–∞–Ω—Å, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 95%
		elif status.id == "bad_luck":
			base_chance *= 0.01  # –£–º–µ–Ω—å—à–∞–µ–º –¥–æ 10%, –Ω–æ –Ω–µ –º–µ–Ω–µ–µ 1%
		elif status.id == "inspired":
			base_chance = min(base_chance + 0.15, 0.95)  # +15% –∫ —à–∞–Ω—Å—É –∫—Ä–∏—Ç–∞
		elif status.id == "adrenaline":
			base_chance = min(base_chance + 0.10, 0.95)  # +10% –∫ —à–∞–Ω—Å—É –∫—Ä–∏—Ç–∞
		elif status.id == "crying":
			base_chance = max(base_chance - 0.10, 0.01)  # -10% –∫ —à–∞–Ω—Å—É –∫—Ä–∏—Ç–∞
		elif status.id == "exhausted":
			base_chance = max(base_chance - 0.15, 0.01)  # -15% –∫ —à–∞–Ω—Å—É –∫—Ä–∏—Ç–∞

	var balanced_bonus = get_balanced_crit_chance_bonus()
	var final_chance = base_chance + balanced_bonus
	
	return clamp(final_chance, 0.01, 1.0)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Ç 1% –¥–æ 95%

func get_balanced_dodge_chance_against(attacker_luck: int) -> float:
	var effective_stats = get_effective_stats()
	var base_chance = stats_system.get_dodge_chance(effective_stats["agility"], attacker_luck)
	var compensation_bonus = _get_defense_compensation_bonus(effective_stats)
	var final_chance = base_chance + compensation_bonus
	
	return clamp(final_chance, 0.01, 0.99)

func _get_defense_compensation_bonus(stats: Dictionary) -> float:
	var agility_fortitude_diff = stats["agility"] - stats["fortitude"]
	
	# –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ —Ä–∞–∑–Ω–∏—Ü—É –õ–æ–≤–∫–æ—Å—Ç—å > –ö—Ä–µ–ø–æ—Å—Ç—å
	if agility_fortitude_diff >= 80:
		return 0.3  # +30% –∑–∞ —Ä–∞–∑–Ω–∏—Ü—É 80+
	elif agility_fortitude_diff >= 50:
		return 0.2  # +20% –∑–∞ —Ä–∞–∑–Ω–∏—Ü—É 50-79
	elif agility_fortitude_diff >= 30:
		return 0.10  # +10% –∑–∞ —Ä–∞–∑–Ω–∏—Ü—É 30-49
	elif agility_fortitude_diff >= 15:
		return 0.05  # +5% –∑–∞ —Ä–∞–∑–Ω–∏—Ü—É 15-29
	else:
		return 0.0   # –ù–µ—Ç –±–æ–Ω—É—Å–∞

func get_balanced_damage_against(defender_fortitude: int) -> Dictionary:
	var base_damage = get_effective_damage()
	var compensation_bonus = _get_strength_compensation_bonus()
	
	var base_after_defense = max(1, base_damage - defender_fortitude)
	var piercing_damage = int(base_damage * compensation_bonus)
	
	return {
		"base_damage": base_after_defense,
		"piercing_damage": piercing_damage,
		"total_damage": base_after_defense + piercing_damage,
		"compensation_bonus": compensation_bonus
	}

func _get_strength_compensation_bonus() -> float:
	var effective_stats = get_effective_stats()
	var strength_endurance_diff = effective_stats["endurance"] - effective_stats["strength"]  # ‚Üê –°–í–û–ò —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
	
	if strength_endurance_diff >= 90:
		return 2.0  # +20% –ø—Ä–æ–±–∏–≤–∞—é—â–µ–≥–æ —É—Ä–æ–Ω–∞
	elif strength_endurance_diff >= 70:
		return 1.6  # +15% –ø—Ä–æ–±–∏–≤–∞—é—â–µ–≥–æ —É—Ä–æ–Ω–∞
	elif strength_endurance_diff >= 50:
		return 1.3  # +10% –ø—Ä–æ–±–∏–≤–∞—é—â–µ–≥–æ —É—Ä–æ–Ω–∞
	elif strength_endurance_diff >= 30:
		return 1.0  # +5% –ø—Ä–æ–±–∏–≤–∞—é—â–µ–≥–æ —É—Ä–æ–Ω–∞
	else:
		return 0.0   # –ù–µ—Ç –±–æ–Ω—É—Å–∞

# –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö
func apply_post_battle_effects():
	if randf() < 0.2:  # 20% —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –±–æ—è
		var negative_statuses = ["sore_knees", "minor_injury", "exhausted", "swamp_bog", "snake_bite", "stunned", "sleepy", "bad_luck"]
		add_status(negative_statuses[randi() % negative_statuses.size()])
	
	if randf() < 0.3:  # 30% —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å
		var positive_statuses = ["thinker", "well_fed", "adrenaline", "inspired", "potion_splash", "strange_mushroom", "mage_potion", "phoenix_feather", "lucky_day"] 
		add_status(positive_statuses[randi() % positive_statuses.size()])


func apply_movement_effects():
	if randf() < 0.2:  # 10% —à–∞–Ω—Å –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏
		if randf() < 0.5:  # 50% –∏–∑ –Ω–∏—Ö - –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ
			var positive_statuses = ["well_fed", "thinker", "inspired", "good_shoes", "adrenaline", "cloak_tent", "lucky_day", "potion_splash", "strange_mushroom", "mage_potion", "phoenix_feather"]
			add_status(positive_statuses[randi() % positive_statuses.size()])
		else:
			var negative_statuses = ["sore_knees", "swamp_bog", "sleepy", "crying", "exhausted", "bad_luck", "minor_injury", "snake_bite"]
			add_status(negative_statuses[randi() % negative_statuses.size()])

func apply_level_up_effects():
	if randf() < 1:
		if randf() < 0.5:
			var positive_statuses = ["thinker", "lucky_day"]
			add_status(positive_statuses[randi() % positive_statuses.size()])
		else:
			var negative_statuses = ["bad_luck"]
			add_status(negative_statuses[randi() % negative_statuses.size()])

func take_damage(amount: int):
	var actual_damage = max(1, amount)
	current_health -= actual_damage
	health_changed.emit(current_health)
	
	if current_health <= 0:
		current_health = 0
		player_died.emit()  # ‚Üê –°–∏–≥–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è

func heal(amount: int):
	current_health = min(current_health + amount, get_max_health())
	health_changed.emit(current_health)

# –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–¥–æ—Ä–æ–≤—å—è –≤–Ω–µ –±–æ—è
func regenerate_health(delta: float):
	if current_health < get_max_health():
		# –ò–°–ü–û–õ–¨–ó–£–ï–ú –≠–§–§–ï–ö–¢–ò–í–ù–£–Æ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–æ–≤
		var effective_stats = get_effective_stats()
		var regen_per_second = effective_stats["health_regen"]
		accumulated_regen += regen_per_second * delta
		
		# –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω–∞–∫–æ–ø–∏–ª—Å—è —Ü–µ–ª—ã–π HP
		if accumulated_regen >= 1.0:
			var hp_to_add = floor(accumulated_regen)
			current_health = clamp(current_health + hp_to_add, 0, get_max_health())
			accumulated_regen -= hp_to_add
			
			var display_health = int(current_health)
			health_changed.emit(display_health)

func _update_max_health():
	var old_max_health = get_max_health()
	var new_max_health = stats_system.base_health + (get_effective_stats()["endurance"] * 5)
	
	# –ï—Å–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ —É–º–µ–Ω—å—à–∏–ª–æ—Å—å - –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ
	if new_max_health < old_max_health and current_health > new_max_health:
		current_health = new_max_health
		health_changed.emit(current_health)

func add_exp(amount: int):
	# ‚Üê –ü–†–û–°–¢–û –î–û–ë–ê–í–õ–Ø–ï–ú –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ô –û–ü–´–¢
	current_exp += amount
	exp_gained.emit()

func add_monster_kill():  # ‚Üê –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø
	monsters_killed += 1
	monsters_killed_changed.emit(monsters_killed)
	# ‚Üê –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–ò–ñ–ï–ù–ò–ô
	var achievement_manager = get_tree().get_first_node_in_group("achievement_manager")
	if achievement_manager:
		achievement_manager.check_kill_achievements(monsters_killed)

func complete_level_up_after_battle():  # ‚Üê –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø
	if current_exp >= exp_to_level:
		_level_up()


func _level_up():
	level += 1
	# ‚Üê –û–ë–ù–û–í–õ–Ø–ï–ú –ü–û–†–ì –û–ü–´–¢–ê –î–õ–Ø –°–õ–ï–î–£–Æ–©–ï–ì–û –£–†–û–í–ù–Ø
	exp_to_level = get_exp_for_next_level(level)
	current_exp = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–ø—ã—Ç
	# –î–∞–µ–º 3 –æ—á–∫–∞ –∑–∞ —É—Ä–æ–≤–µ–Ω—å
	available_points += 3
	# –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
	current_health = get_max_health()
	level_up.emit(level, available_points)
	# ‚Üê –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–ò–ñ–ï–ù–ò–ô –£–†–û–í–ù–Ø
	apply_level_up_effects()
	var achievement_manager = get_tree().get_first_node_in_group("achievement_manager")
	if achievement_manager:
		achievement_manager.check_level_achievements(level)


func increase_strength():
	if available_points > 0:
		stats_system.strength += 1
		available_points -= 1
		stats_changed.emit()
		# ‚Üê –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–ò–ñ–ï–ù–ò–ô –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö
		var achievement_manager = get_tree().get_first_node_in_group("achievement_manager")
		if achievement_manager:
			achievement_manager.check_stats_achievements(self)  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–∞–º PlayerStats

func increase_fortitude():
	if available_points > 0:
		stats_system.fortitude += 1  
		available_points -= 1
		stats_changed.emit()
		# ‚Üê –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–ò–ñ–ï–ù–ò–ô –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö
		var achievement_manager = get_tree().get_first_node_in_group("achievement_manager")
		if achievement_manager:
			achievement_manager.check_stats_achievements(self)  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–∞–º PlayerStats

func increase_agility():
	if available_points > 0:
		stats_system.agility += 1
		available_points -= 1
		stats_changed.emit()
		# ‚Üê –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–ò–ñ–ï–ù–ò–ô –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö
		var achievement_manager = get_tree().get_first_node_in_group("achievement_manager")
		if achievement_manager:
			achievement_manager.check_stats_achievements(self)  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–∞–º PlayerStats

func increase_endurance():
	if available_points > 0:
		stats_system.endurance += 1
		available_points -= 1
		stats_changed.emit()
		# ‚Üê –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–ò–ñ–ï–ù–ò–ô –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö
		var achievement_manager = get_tree().get_first_node_in_group("achievement_manager")
		if achievement_manager:
			achievement_manager.check_stats_achievements(self)  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–∞–º PlayerStats

func increase_luck():
	if available_points > 0:
		stats_system.luck += 1
		available_points -= 1
		stats_changed.emit()
		# ‚Üê –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–ò–ñ–ï–ù–ò–ô –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö
		var achievement_manager = get_tree().get_first_node_in_group("achievement_manager")
		if achievement_manager:
			achievement_manager.check_stats_achievements(self)  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–∞–º PlayerStats


func get_exp_for_next_level(current_level: int) -> int:
	# ‚Üê –§–ò–ö–°–ò–†–û–í–ê–ù–ù–û–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –ü–û–ë–ï–î –î–õ–Ø –ö–ê–ñ–î–û–ì–û –£–†–û–í–ù–Ø
	if current_level <= 0:
		return 100
	elif current_level <= 40:
		return current_level * 100
	else:
		return 4000


func get_exp_reward_multiplier(player_level: int) -> float:
	# ‚Üê –§–ò–ö–°–ò–†–û–í–ê–ù–ù–ê–Ø –ù–ê–ì–†–ê–î–ê: –í–°–ï–ì–î–ê 20 exp –∑–∞ –ø–æ–±–µ–¥—É
	# –ú–Ω–æ–∂–∏—Ç–µ–ª—å –≤—Å–µ–≥–¥–∞ 1.0, —Ç–∞–∫ –∫–∞–∫ –º–æ–Ω—Å—Ç—Ä—ã –¥–∞—é—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–ø—ã—Ç
	return 1.0

func load_from_data(data: Dictionary):
	level = data.get("level", 1)
	current_exp = data.get("current_exp", 0)
	exp_to_level = data.get("exp_to_level", 100)
	current_health = data.get("current_health", 100)
	available_points = data.get("available_points", 0)
	stats_system.strength = data.get("strength", 1)
	stats_system.fortitude = data.get("fortitude", 1) 
	stats_system.endurance = data.get("endurance", 1)
	stats_system.luck = data.get("luck", 1)
	monsters_killed = data.get("monsters_killed", 0)  # ‚Üê –ó–ê–ì–†–£–ó–ö–ê –°–ß–ï–¢–ß–ò–ö–ê
	
	_init_status_library()
	# –ù–ï –≤—ã–∑—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª level_up –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ!
	_load_active_statuses(data.get("active_statuses", []))
	
	health_changed.emit(current_health)  # ‚Üê –¢–æ–ª—å–∫–æ –∑–¥–æ—Ä–æ–≤—å–µ –æ–±–Ω–æ–≤–ª—è–µ–º
	monsters_killed_changed.emit(monsters_killed)  # ‚Üê –û–ë–ù–û–í–õ–Ø–ï–ú –ò–ù–¢–ï–†–§–ï–ô–°
	stats_changed.emit()  # ‚Üê –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫

func _load_active_statuses(statuses_data: Array):
	# –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã
	active_statuses.clear()
	
	if status_library.is_empty():
		_init_status_library()
	
	for status_data in statuses_data:
		var status_id = status_data["id"]
		var duration = status_data["duration"]
		
		if status_library.has(status_id):
			var template = status_library[status_id]
			var new_status = StatusEffect.new(
				template.id, 
				template.name, 
				template.description,
				template.type, 
				duration  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
			)
			
			# –ö–æ–ø–∏—Ä—É–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
			new_status.speed_modifier = template.speed_modifier
			new_status.strength_modifier = template.strength_modifier
			new_status.fortitude_modifier = template.fortitude_modifier
			new_status.endurance_modifier = template.endurance_modifier
			new_status.luck_modifier = template.luck_modifier
			new_status.health_regen_modifier = template.health_regen_modifier
			
			active_statuses.append(new_status)
	
	# –û–±–Ω–æ–≤–ª—è–µ–º UI
	statuses_changed.emit()
	stats_changed.emit()

func is_balanced_build() -> bool:
	var effective_stats = get_effective_stats()
	var stats = [
		effective_stats["strength"],
		effective_stats["fortitude"], 
		effective_stats["agility"],
		effective_stats["endurance"],
		effective_stats["luck"]
	]
	
	# –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É
	var min_stat = stats[0]
	var max_stat = stats[0]
	for stat in stats:
		min_stat = min(min_stat, stat)
		max_stat = max(max_stat, stat)
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Å–∞–º–æ–π –±–æ–ª—å—à–æ–π –∏ —Å–∞–º–æ–π –º–∞–ª–µ–Ω—å–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–æ–π ‚â§ 5
	return (max_stat - min_stat) <= 5 and min_stat >= 10

# –ë–æ–Ω—É—Å —É—Ä–æ–Ω–∞ –∑–∞ –±–∞–ª–∞–Ω—Å (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Ä–æ–≤–Ω—è)
func get_balanced_damage_bonus() -> int:
	if not is_balanced_build():
		return 0
	
	# +1 —É—Ä–æ–Ω –∑–∞ —É—Ä–æ–≤–µ–Ω—å, –º–∏–Ω–∏–º—É–º +10, –º–∞–∫—Å–∏–º—É–º +50
	return clamp(level, 1, 500000)

# –ë–æ–Ω—É—Å —à–∞–Ω—Å–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è –∑–∞ –±–∞–ª–∞–Ω—Å
func get_balanced_hit_chance_bonus() -> float:
	if not is_balanced_build():
		return 0.0
	
	var effective_stats = get_effective_stats()
	var stats = [
		effective_stats["strength"],
		effective_stats["fortitude"],
		effective_stats["agility"], 
		effective_stats["endurance"],
		effective_stats["luck"]
	]
	
	# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
	var min_stat = stats[0]
	var max_stat = stats[0]
	for stat in stats:
		min_stat = min(min_stat, stat)
		max_stat = max(max_stat, stat)
	
	# –ß–µ–º –º–µ–Ω—å—à–µ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É min –∏ max, —Ç–µ–º –≤—ã—à–µ –±–æ–Ω—É—Å (–º–∞–∫—Å–∏–º—É–º 30%)
	var diff = max_stat - min_stat
	if diff <= 1:
		return 0.30  # –ü–æ—á—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
	elif diff <= 3:
		return 0.20  # –•–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å
	elif diff <= 5:
		return 0.10  # –ë–∞–∑–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
	else:
		return 0.0

# –ë–æ–Ω—É—Å —à–∞–Ω—Å–∞ –∫—Ä–∏—Ç–∞ –∑–∞ –±–∞–ª–∞–Ω—Å  
func get_balanced_crit_chance_bonus() -> float:
	if not is_balanced_build():
		return 0.0
	
	var effective_stats = get_effective_stats()
	var stats = [
		effective_stats["strength"],
		effective_stats["fortitude"],
		effective_stats["agility"],
		effective_stats["endurance"],
		effective_stats["luck"]
	]
	
	# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º "–≥–∞—Ä–º–æ–Ω–∏—é" —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
	var total = 0.0
	for stat in stats:
		total += stat
	var average = total / stats.size()
	
	# –°—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ
	var total_deviation = 0.0
	for stat in stats:
		total_deviation += abs(stat - average)
	var avg_deviation = total_deviation / stats.size()
	
	# –ß–µ–º –º–µ–Ω—å—à–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, —Ç–µ–º –≤—ã—à–µ –±–æ–Ω—É—Å (–º–∞–∫—Å–∏–º—É–º 25%)
	if avg_deviation <= 0.0:
		return 0.25  # –ò–¥–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
	elif avg_deviation <= 1.0:
		return 0.20  # –û—Ç–ª–∏—á–Ω—ã–π –±–∞–ª–∞–Ω—Å
	elif avg_deviation <= 3.0:
		return 0.15  # –•–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å
	elif avg_deviation <= 5.0:
		return 0.10  # –£–º–µ—Ä–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
	else:
		return 0.00  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å

# –ë–æ–Ω—É—Å –∑–∞—â–∏—Ç—ã –∑–∞ –±–∞–ª–∞–Ω—Å (–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–Ω–∞)
func get_balanced_defense_bonus() -> int:
	if not is_balanced_build():
		return 0
	
	# +1 –∑–∞—â–∏—Ç–∞ –∑–∞ —É—Ä–æ–≤–µ–Ω—å, –º–∏–Ω–∏–º—É–º +10, –º–∞–∫—Å–∏–º—É–º +50
	return clamp(level, 1, 500000)
